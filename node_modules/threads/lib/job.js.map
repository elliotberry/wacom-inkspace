{"version":3,"sources":["job.js"],"names":["Job","pool","thread","runArgs","sendArgs","emit","run","args","length","Error","send","executeOn","onProgress","onMessage","removeListener","onError","on","once","promise","Promise","resolve","abort","destroy","removeAllListeners"],"mappings":";;;;AACA;;;;;;;;;;;;IAEqBA,G;;;AACnB,eAAYC,IAAZ,EAAkB;AAAA;;AAAA,iDAChB,wBADgB;;AAEhB,UAAKA,IAAL,GAAcA,IAAd;AACA,UAAKC,MAAL,GAAc,IAAd;;AAEA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgB,EAAhB;;AAEAH,SAAKI,IAAL,CAAU,QAAV;AARgB;AASjB;;gBAEDC,G,kBAAa;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACX,QAAIA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAKN,OAAL,GAAeI,IAAf;AACA,WAAO,IAAP;AACD,G;;gBAEDG,I,mBAAc;AACZ,QAAI,KAAKP,OAAL,CAAaK,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAHW,uCAANF,IAAM;AAANA,UAAM;AAAA;;AAKZ,SAAKH,QAAL,GAAgBG,IAAhB;;AAEA,SAAKF,IAAL,CAAU,YAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDM,S,sBAAUT,M,EAAQ;AAAA;AAAA;AAAA;;AAChB,QAAMU,aAAa,SAAbA,UAAa;AAAA,yCAAIL,IAAJ;AAAIA,YAAJ;AAAA;;AAAA,aAAa,OAAKF,IAAL,gBAAU,UAAV,SAAyBE,IAAzB,EAAb;AAAA,KAAnB;AACA,QAAMM,YAAY,SAAZA,SAAY,GAAa;AAAA,yCAATN,IAAS;AAATA,YAAS;AAAA;;AAC7B,aAAKF,IAAL,gBAAU,MAAV,SAAqBE,IAArB;AACAL,aAAOY,cAAP,CAAsB,UAAtB,EAAkCF,UAAlC;AACD,KAHD;AAIA,QAAMG,UAAU,SAAVA,OAAU,GAAa;AAAA,yCAATR,IAAS;AAATA,YAAS;AAAA;;AAC3B,aAAKF,IAAL,gBAAU,OAAV,SAAsBE,IAAtB;AACAL,aAAOY,cAAP,CAAsB,UAAtB,EAAkCF,UAAlC;AACD,KAHD;;AAKA,4DACGI,EADH,CACM,UADN,EACkBJ,UADlB,EAEGK,IAFH,CAEQ,SAFR,EAEmBJ,SAFnB,EAGGI,IAHH,CAGQ,OAHR,EAGiBF,OAHjB,GAIGT,GAJH,6BAIU,KAAKH,OAJf,GAKGO,IALH,8BAKW,KAAKN,QALhB;;AAOA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,IAAL,CAAU,eAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDa,O,sBAAU;AAAA;;AACR;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B;AACA,UAAI,CAAC,OAAKlB,MAAV,EAAkB;AAChB,eAAKe,IAAL,CAAU,eAAV,EAA2B,YAAM;AAC/BG,kBAAQ,OAAKlB,MAAL,CAAYgB,OAAZ,EAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLE,gBAAQ,OAAKlB,MAAL,CAAYgB,OAAZ,EAAR;AACD;AACF,KATM,CAAP;AAUD,G;;gBAEDG,K,oBAAQ;AACN,SAAKhB,IAAL,CAAU,OAAV;AACD,G;;gBAEDiB,O,sBAAW;AACT,SAAKC,kBAAL;AACA,WAAO,KAAKpB,OAAZ;AACA,WAAO,KAAKC,QAAZ;AACD,G;;;;;kBA7EkBJ,G","file":"job.js","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n    this.thread = null;\n\n    this.runArgs = [];\n    this.sendArgs = [];\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    const onProgress = (...args) => this.emit('progress', ...args);\n    const onMessage = (...args) => {\n      this.emit('done', ...args);\n      thread.removeListener('progress', onProgress);\n    };\n    const onError = (...args) => {\n      this.emit('error', ...args);\n      thread.removeListener('progress', onProgress);\n    };\n\n    thread\n      .on('progress', onProgress)\n      .once('message', onMessage)\n      .once('error', onError)\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n\n    this.thread = thread;\n    this.emit('threadChanged');\n    return this;\n  }\n\n  promise() {\n    // Always return a promise\n    return new Promise((resolve) => {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!this.thread) {\n        this.once('threadChanged', () => {\n          resolve(this.thread.promise());\n        });\n      } else {\n        resolve(this.thread.promise());\n      }\n    });\n  }\n\n  abort() {\n    this.emit('abort');\n  }\n\n  destroy () {\n    this.removeAllListeners();\n    delete this.runArgs;\n    delete this.sendArgs;\n  }\n}\n"]}