{"version":3,"sources":["pool.js"],"names":["Pool","threads","options","spawn","pool","size","idleThreads","slice","jobQueue","runArgs","spawnOptions","on","job","handleNewJob","dequeue","run","args","send","Error","killAll","forEach","thread","kill","queueJob","once","dropJob","push","index","indexOf","splice","length","shift","removeAllListeners","handleJobSuccess","handleJobError","handleJobAbort","executeOn","responseArgs","emit","handleJobDone","error","destroy","setTimeout","newThread","threadCount","threadIndex"],"mappings":"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","file":"pool.js","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport Job          from './job';\nimport defaults     from './defaults';\nimport { spawn }    from './';\n\nexport default class Pool extends EventEmitter {\n  constructor(threads, options = {}) {\n    super();\n    this.threads = Pool.spawn(threads || defaults.pool.size, options);\n    this.idleThreads = this.threads.slice();\n    this.jobQueue = [];\n    this.runArgs = [];\n    this.spawnOptions = options;\n\n    this.on('newJob', (job) => this.handleNewJob(job));\n    this.on('threadAvailable', () => this.dequeue());\n  }\n\n  run(...args) {\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (!this.runArgs) {\n      throw new Error('Pool.send() called without prior Pool.run(). You need to define what to run first.');\n    }\n\n    const job = new Job(this);\n    return job.run(...this.runArgs).send(...args);\n  }\n\n  killAll() {\n    this.threads.forEach(thread => {\n      thread.kill();\n    });\n  }\n\n  queueJob(job) {\n    job.once('abort', () => this.dropJob(job));  // triggered by job.abort()\n    this.jobQueue.push(job);\n    this.dequeue();\n  }\n\n  dropJob(job) {\n    const index = this.jobQueue.indexOf(job);\n    if (index !== -1) {\n      this.jobQueue.splice(index, 1);\n    }\n  }\n\n  dequeue() {\n    if (this.jobQueue.length === 0 || this.idleThreads.length === 0) {\n      return;\n    }\n\n    const job = this.jobQueue.shift();\n    const thread = this.idleThreads.shift();\n\n    job.removeAllListeners('abort'); // remove previous listener\n\n    job\n      .once('done', (...args) => this.handleJobSuccess(thread, job, ...args))\n      .once('error', (...args) => this.handleJobError(thread, job, ...args))\n      .once('abort', () => this.handleJobAbort(thread, job));\n\n    job.executeOn(thread);\n  }\n\n  handleNewJob(job) {\n    job.once('readyToRun', () => this.queueJob(job));    // triggered by job.send()\n  }\n\n  handleJobSuccess(thread, job, ...responseArgs) {\n    this.emit('done', job, ...responseArgs);\n    this.handleJobDone(thread, job);\n  }\n\n  handleJobError(thread, job, error) {\n    this.emit('error', job, error);\n    this.handleJobDone(thread, job);\n  }\n\n  handleJobDone(thread, job) {\n    job.destroy();                    // to prevent memory leak\n    this.idleThreads.push(thread);\n    this.emit('threadAvailable');\n\n    if (this.idleThreads.length === this.threads.length) {\n      // run deferred to give other job.on('done') handlers time to run first\n      setTimeout(() => { this.emit('finished'); }, 0);\n    }\n  }\n\n  handleJobAbort(thread, job) {\n    thread.kill();\n\n    const index = this.threads.indexOf(thread);\n    const newThread = spawn(null, [], this.spawnOptions);\n\n    this.threads.splice(index, 1, newThread);\n    this.handleJobDone(newThread, job);\n  }\n}\n\nPool.spawn = (threadCount, options) => {\n  const threads = [];\n\n  for (let threadIndex = 0; threadIndex < threadCount; threadIndex++) {\n    threads.push(spawn(null, [], options));\n  }\n\n  return threads;\n};\n"]}