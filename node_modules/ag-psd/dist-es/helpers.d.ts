import { PsdReader } from './psdReader';
import { Layer, ChannelID, Compression, WriteOptions } from './psd';
export interface ChannelData {
    channelId: ChannelID;
    compression: Compression;
    buffer: Uint8Array | undefined;
    length: number;
}
export interface LayerChannelData {
    layer: Layer;
    channels: ChannelData[];
    top: number;
    left: number;
    right: number;
    bottom: number;
    mask?: {
        top: number;
        left: number;
        right: number;
        bottom: number;
    };
}
export declare type PixelArray = Uint8ClampedArray | Uint8Array;
export interface PixelData {
    data: PixelArray;
    width: number;
    height: number;
}
export declare function offsetForChannel(channelId: ChannelID): number;
export declare function toArray(value: Uint8Array): any[];
export declare function readColor(reader: PsdReader): any[];
export declare function hasAlpha(data: PixelData): boolean;
export declare function getLayerDimentions({ canvas }: {
    canvas?: HTMLCanvasElement;
}): {
    width: number;
    height: number;
};
export declare function getChannels(tempBuffer: Uint8Array, layer: Layer, background: boolean, options: WriteOptions): LayerChannelData;
export declare function getLayerChannels(tempBuffer: Uint8Array, layer: Layer, background: boolean, options: WriteOptions): LayerChannelData;
export declare function resetCanvas({ width, height, data }: PixelData): void;
export declare function decodeBitmap(input: PixelArray, output: PixelArray, width: number, height: number): void;
export declare function writeDataRaw(data: PixelData, offset: number, width: number, height: number): Uint8Array | undefined;
export declare function readDataRaw(reader: PsdReader, pixelData: PixelData | undefined, offset: number, width: number, height: number): void;
export declare function writeDataRLE(buffer: Uint8Array, { data }: PixelData, width: number, height: number, offsets: number[]): Uint8Array | undefined;
export declare function readDataRLE(reader: PsdReader, pixelData: PixelData | undefined, _width: number, height: number, step: number, offsets: number[]): void;
export declare let createCanvas: (width: number, height: number) => HTMLCanvasElement;
export declare let createCanvasFromData: (data: Uint8Array) => HTMLCanvasElement;
export declare function initializeCanvas(createCanvasMethod: (width: number, height: number) => HTMLCanvasElement, createCanvasFromDataMethod?: (data: Uint8Array) => HTMLCanvasElement): void;
