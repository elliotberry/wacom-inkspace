export function parseEngineData(data) {
    var openBracket = '('.charCodeAt(0);
    var closeBracket = ')'.charCodeAt(0);
    var text = '';
    for (var i = 0; i < data.length; i++) {
        if (i < data.length - 3 && data[i] === openBracket && data[i + 1] === 0xfe && data[i + 2] === 0xff) {
            text += String.fromCharCode(data[i]);
            for (i += 3; i < (data.length - 1) && data[i] !== closeBracket; i += 2) {
                text += String.fromCharCode((data[i] << 8) | data[i + 1]);
            }
            i--;
        }
        else {
            text += String.fromCharCode(data[i]);
        }
    }
    var nodeStack = [];
    var propertyStack = [];
    var node = undefined;
    var property;
    function updateNode(propertyValue, nodeValue) {
        if (Array.isArray(nodeValue)) {
            nodeValue.push(node);
        }
        else if (nodeValue) {
            nodeValue[propertyValue] = node;
        }
    }
    var index = 0;
    function isWhitespace(char) {
        return char === ' ' || char === '\n' || char === '\r' || char === '\t';
    }
    function skipWhitespace() {
        while (index < text.length && isWhitespace(text.charAt(index))) {
            index++;
        }
    }
    function getToken() {
        var char = text.charAt(index);
        if (char === '<' && text.charAt(index + 1) === '<') {
            index += 2;
            return '<<';
        }
        else if (char === '>' && text.charAt(index + 1) === '>') {
            index += 2;
            return '>>';
        }
        else if (char === '/' || char === '(' || char === '[' || char === ']') {
            index += 1;
            return char;
        }
        else if (char === 't' && text.substr(index, 4) === 'true') {
            index += 4;
            return 'true';
        }
        else if (char === 'f' && text.substr(index, 5) === 'false') {
            index += 5;
            return 'false';
        }
        else if (/[0-9.-]/.test(char)) {
            return '0';
        }
        else {
            index += 1;
            return "invalid token \"" + char + "\" at " + index + " around \"" + text.substring(index - 10, index + 10) + "\"";
        }
    }
    function getName() {
        var start = index;
        while (index < text.length && !isWhitespace(text.charAt(index))) {
            index++;
        }
        return text.substring(start, index);
    }
    function getText() {
        var start = index;
        while (index < text.length && text.charAt(index) !== ')') {
            if (text.charAt(index) === '\\') {
                index++;
            }
            index++;
        }
        index++;
        return text.substring(start, index - 1);
    }
    function getNumber() {
        var start = index;
        while (index < text.length && /[0-9.-]/.test(text.charAt(index))) {
            index++;
        }
        return parseFloat(text.substring(start, index));
    }
    function addValue(value) {
        if (Array.isArray(node)) {
            node.push(value);
        }
        else if (node) {
            node[property] = value;
        }
    }
    skipWhitespace();
    while (index < text.length) {
        var token = getToken();
        switch (token) {
            case '<<': {
                nodeStack.push(node);
                propertyStack.push(property);
                node = {};
                property = undefined;
                break;
            }
            case '>>': {
                var nodeValue = nodeStack.pop();
                var propertyValue = propertyStack.pop();
                if (nodeValue) {
                    updateNode(propertyValue, nodeValue);
                    node = nodeValue;
                }
                break;
            }
            case '/': {
                property = getName();
                break;
            }
            case '(': {
                var text_1 = getText();
                addValue(text_1);
                break;
            }
            case '[': {
                nodeStack.push(node);
                propertyStack.push(property);
                node = [];
                property = undefined;
                break;
            }
            case ']': {
                var nodeValue = nodeStack.pop();
                var propertyValue = propertyStack.pop();
                updateNode(propertyValue, nodeValue);
                node = nodeValue;
                break;
            }
            case '0': {
                addValue(getNumber());
                break;
            }
            case 'true':
            case 'false': {
                addValue(token === 'true');
                break;
            }
            default:
                console.log('# unhandled token', token);
        }
        skipWhitespace();
    }
    // console.log(JSON.stringify(node, null, 2)); // .substr(0, 1000));
    // require('fs').writeFileSync('engineData.json', JSON.stringify(node, null, 2), 'utf8');
    return node;
}
export function serializeEngineData(data) {
    var indent = '';
    var lines = ['', ''];
    function serializeProperty(key, value) {
        var index = lines.length;
        lines.push(indent + "/" + key);
        var serialized = serializeValue(value);
        if (serialized) {
            lines[index] += ' ' + serialized;
        }
    }
    function serializeNumber(value) {
        if ((value | 0) === value) {
            return value.toString();
        }
        else {
            return value.toFixed(3).replace(/(\d)0+$/g, '$1');
        }
    }
    function serializeValue(value) {
        if (typeof value === 'number') {
            return serializeNumber(value);
        }
        else if (typeof value === 'boolean') {
            return value ? 'true' : 'false';
        }
        else if (typeof value === 'string') {
            var encoded = '\u00fe\u00ff';
            for (var i = 0; i < value.length; i++) {
                var charCode = value.charCodeAt(i);
                encoded += "" + String.fromCharCode(charCode >> 8) + String.fromCharCode(charCode & 0xff);
            }
            return "(" + encoded + ")";
        }
        else if (Array.isArray(value)) {
            if (value.every(function (x) { return typeof x === 'number'; })) {
                return "[ " + value.map(serializeNumber).join(' ') + " ]";
            }
            else {
                var temp = indent;
                indent = indent + '\t';
                for (var i = 0; i < value.length; i++) {
                    var serialized = serializeValue(value[i]);
                    if (serialized) {
                        lines.push("" + indent + serialized);
                    }
                }
                indent = temp;
                lines.push(indent + "]");
                return '[';
            }
        }
        else if (typeof value === 'object') {
            lines.push(indent + "<<");
            var temp = indent;
            indent = indent + '\t';
            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                var key = _a[_i];
                serializeProperty(key, value[key]);
            }
            indent = temp;
            lines.push(indent + ">>");
        }
        return undefined;
    }
    serializeValue(data);
    var buffer = new Uint8Array(lines.reduce(function (sum, line) { return sum + line.length + 1; }, 0) - 1);
    var offset = 0;
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var line = lines_1[_i];
        for (var i = 0; i < line.length; i++, offset++) {
            buffer[offset] = line.charCodeAt(i);
        }
        buffer[offset] = '\n'.charCodeAt(0);
        offset++;
    }
    // console.log('serialized:\n', lines.join('\n'));
    return buffer;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Y0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXJCLElBQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFLLE9BQUEsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLEtBQW1CLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLLEVBQUU7UUFBckIsSUFBTSxJQUFJLGNBQUE7UUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRyxNQUFNLEVBQUUsRUFBRTtZQUNoRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sRUFBRSxDQUFDO0tBQ1Q7SUFFRCxrREFBa0Q7SUFFbEQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwiZmlsZSI6ImVuZ2luZURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VFbmdpbmVEYXRhKGRhdGE6IG51bWJlcltdIHwgVWludDhBcnJheSkge1xyXG5cdGNvbnN0IG9wZW5CcmFja2V0ID0gJygnLmNoYXJDb2RlQXQoMCk7XHJcblx0Y29uc3QgY2xvc2VCcmFja2V0ID0gJyknLmNoYXJDb2RlQXQoMCk7XHJcblx0bGV0IHRleHQgPSAnJztcclxuXHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAoaSA8IGRhdGEubGVuZ3RoIC0gMyAmJiBkYXRhW2ldID09PSBvcGVuQnJhY2tldCAmJiBkYXRhW2kgKyAxXSA9PT0gMHhmZSAmJiBkYXRhW2kgKyAyXSA9PT0gMHhmZikge1xyXG5cdFx0XHR0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSk7XHJcblxyXG5cdFx0XHRmb3IgKGkgKz0gMzsgaSA8IChkYXRhLmxlbmd0aCAtIDEpICYmIGRhdGFbaV0gIT09IGNsb3NlQnJhY2tldDsgaSArPSAyKSB7XHJcblx0XHRcdFx0dGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChkYXRhW2ldIDw8IDgpIHwgZGF0YVtpICsgMV0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpLS07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb25zdCBub2RlU3RhY2s6IGFueVtdID0gW107XHJcblx0Y29uc3QgcHJvcGVydHlTdGFjazogKHN0cmluZyB8IHVuZGVmaW5lZClbXSA9IFtdO1xyXG5cclxuXHRsZXQgbm9kZTogYW55ID0gdW5kZWZpbmVkO1xyXG5cdGxldCBwcm9wZXJ0eTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVOb2RlKHByb3BlcnR5VmFsdWU6IHN0cmluZywgbm9kZVZhbHVlOiBhbnkpIHtcclxuXHRcdGlmIChBcnJheS5pc0FycmF5KG5vZGVWYWx1ZSkpIHtcclxuXHRcdFx0bm9kZVZhbHVlLnB1c2gobm9kZSk7XHJcblx0XHR9IGVsc2UgaWYgKG5vZGVWYWx1ZSkge1xyXG5cdFx0XHRub2RlVmFsdWVbcHJvcGVydHlWYWx1ZSFdID0gbm9kZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxldCBpbmRleCA9IDA7XHJcblxyXG5cdGZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjaGFyOiBzdHJpbmcpIHtcclxuXHRcdHJldHVybiBjaGFyID09PSAnICcgfHwgY2hhciA9PT0gJ1xcbicgfHwgY2hhciA9PT0gJ1xccicgfHwgY2hhciA9PT0gJ1xcdCc7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBza2lwV2hpdGVzcGFjZSgpIHtcclxuXHRcdHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoICYmIGlzV2hpdGVzcGFjZSh0ZXh0LmNoYXJBdChpbmRleCkpKSB7XHJcblx0XHRcdGluZGV4Kys7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXRUb2tlbigpIHtcclxuXHRcdGNvbnN0IGNoYXIgPSB0ZXh0LmNoYXJBdChpbmRleCk7XHJcblxyXG5cdFx0aWYgKGNoYXIgPT09ICc8JyAmJiB0ZXh0LmNoYXJBdChpbmRleCArIDEpID09PSAnPCcpIHtcclxuXHRcdFx0aW5kZXggKz0gMjtcclxuXHRcdFx0cmV0dXJuICc8PCc7XHJcblx0XHR9IGVsc2UgaWYgKGNoYXIgPT09ICc+JyAmJiB0ZXh0LmNoYXJBdChpbmRleCArIDEpID09PSAnPicpIHtcclxuXHRcdFx0aW5kZXggKz0gMjtcclxuXHRcdFx0cmV0dXJuICc+Pic7XHJcblx0XHR9IGVsc2UgaWYgKGNoYXIgPT09ICcvJyB8fCBjaGFyID09PSAnKCcgfHwgY2hhciA9PT0gJ1snIHx8IGNoYXIgPT09ICddJykge1xyXG5cdFx0XHRpbmRleCArPSAxO1xyXG5cdFx0XHRyZXR1cm4gY2hhcjtcclxuXHRcdH0gZWxzZSBpZiAoY2hhciA9PT0gJ3QnICYmIHRleHQuc3Vic3RyKGluZGV4LCA0KSA9PT0gJ3RydWUnKSB7XHJcblx0XHRcdGluZGV4ICs9IDQ7XHJcblx0XHRcdHJldHVybiAndHJ1ZSc7XHJcblx0XHR9IGVsc2UgaWYgKGNoYXIgPT09ICdmJyAmJiB0ZXh0LnN1YnN0cihpbmRleCwgNSkgPT09ICdmYWxzZScpIHtcclxuXHRcdFx0aW5kZXggKz0gNTtcclxuXHRcdFx0cmV0dXJuICdmYWxzZSc7XHJcblx0XHR9IGVsc2UgaWYgKC9bMC05Li1dLy50ZXN0KGNoYXIpKSB7XHJcblx0XHRcdHJldHVybiAnMCc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbmRleCArPSAxO1xyXG5cdFx0XHRyZXR1cm4gYGludmFsaWQgdG9rZW4gXCIke2NoYXJ9XCIgYXQgJHtpbmRleH0gYXJvdW5kIFwiJHt0ZXh0LnN1YnN0cmluZyhpbmRleCAtIDEwLCBpbmRleCArIDEwKX1cImA7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXROYW1lKCkge1xyXG5cdFx0Y29uc3Qgc3RhcnQgPSBpbmRleDtcclxuXHJcblx0XHR3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCAmJiAhaXNXaGl0ZXNwYWNlKHRleHQuY2hhckF0KGluZGV4KSkpIHtcclxuXHRcdFx0aW5kZXgrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIGluZGV4KTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFRleHQoKSB7XHJcblx0XHRjb25zdCBzdGFydCA9IGluZGV4O1xyXG5cclxuXHRcdHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckF0KGluZGV4KSAhPT0gJyknKSB7XHJcblx0XHRcdGlmICh0ZXh0LmNoYXJBdChpbmRleCkgPT09ICdcXFxcJykge1xyXG5cdFx0XHRcdGluZGV4Kys7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGluZGV4Kys7XHJcblx0XHR9XHJcblxyXG5cdFx0aW5kZXgrKztcclxuXHJcblx0XHRyZXR1cm4gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIGluZGV4IC0gMSk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXROdW1iZXIoKSB7XHJcblx0XHRjb25zdCBzdGFydCA9IGluZGV4O1xyXG5cclxuXHRcdHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoICYmIC9bMC05Li1dLy50ZXN0KHRleHQuY2hhckF0KGluZGV4KSkpIHtcclxuXHRcdFx0aW5kZXgrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh0ZXh0LnN1YnN0cmluZyhzdGFydCwgaW5kZXgpKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFkZFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuXHRcdGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XHJcblx0XHRcdG5vZGUucHVzaCh2YWx1ZSk7XHJcblx0XHR9IGVsc2UgaWYgKG5vZGUpIHtcclxuXHRcdFx0bm9kZVtwcm9wZXJ0eSFdID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRza2lwV2hpdGVzcGFjZSgpO1xyXG5cclxuXHR3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xyXG5cdFx0Y29uc3QgdG9rZW4gPSBnZXRUb2tlbigpO1xyXG5cclxuXHRcdHN3aXRjaCAodG9rZW4pIHtcclxuXHRcdFx0Y2FzZSAnPDwnOiB7XHJcblx0XHRcdFx0bm9kZVN0YWNrLnB1c2gobm9kZSk7XHJcblx0XHRcdFx0cHJvcGVydHlTdGFjay5wdXNoKHByb3BlcnR5KTtcclxuXHRcdFx0XHRub2RlID0ge307XHJcblx0XHRcdFx0cHJvcGVydHkgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnPj4nOiB7XHJcblx0XHRcdFx0Y29uc3Qgbm9kZVZhbHVlID0gbm9kZVN0YWNrLnBvcCgpO1xyXG5cdFx0XHRcdGNvbnN0IHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0eVN0YWNrLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRpZiAobm9kZVZhbHVlKSB7XHJcblx0XHRcdFx0XHR1cGRhdGVOb2RlKHByb3BlcnR5VmFsdWUhLCBub2RlVmFsdWUpO1xyXG5cdFx0XHRcdFx0bm9kZSA9IG5vZGVWYWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnLyc6IHtcclxuXHRcdFx0XHRwcm9wZXJ0eSA9IGdldE5hbWUoKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlICcoJzoge1xyXG5cdFx0XHRcdGNvbnN0IHRleHQgPSBnZXRUZXh0KCk7XHJcblx0XHRcdFx0YWRkVmFsdWUodGV4dCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnWyc6IHtcclxuXHRcdFx0XHRub2RlU3RhY2sucHVzaChub2RlKTtcclxuXHRcdFx0XHRwcm9wZXJ0eVN0YWNrLnB1c2gocHJvcGVydHkpO1xyXG5cdFx0XHRcdG5vZGUgPSBbXTtcclxuXHRcdFx0XHRwcm9wZXJ0eSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlICddJzoge1xyXG5cdFx0XHRcdGNvbnN0IG5vZGVWYWx1ZSA9IG5vZGVTdGFjay5wb3AoKTtcclxuXHRcdFx0XHRjb25zdCBwcm9wZXJ0eVZhbHVlID0gcHJvcGVydHlTdGFjay5wb3AoKTtcclxuXHRcdFx0XHR1cGRhdGVOb2RlKHByb3BlcnR5VmFsdWUhLCBub2RlVmFsdWUpO1xyXG5cdFx0XHRcdG5vZGUgPSBub2RlVmFsdWU7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnMCc6IHtcclxuXHRcdFx0XHRhZGRWYWx1ZShnZXROdW1iZXIoKSk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAndHJ1ZSc6XHJcblx0XHRcdGNhc2UgJ2ZhbHNlJzoge1xyXG5cdFx0XHRcdGFkZFZhbHVlKHRva2VuID09PSAndHJ1ZScpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJyMgdW5oYW5kbGVkIHRva2VuJywgdG9rZW4pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNraXBXaGl0ZXNwYWNlKCk7XHJcblx0fVxyXG5cclxuXHQvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSk7IC8vIC5zdWJzdHIoMCwgMTAwMCkpO1xyXG5cdC8vIHJlcXVpcmUoJ2ZzJykud3JpdGVGaWxlU3luYygnZW5naW5lRGF0YS5qc29uJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICd1dGY4Jyk7XHJcblxyXG5cdHJldHVybiBub2RlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplRW5naW5lRGF0YShkYXRhOiBhbnkpIHtcclxuXHRsZXQgaW5kZW50ID0gJyc7XHJcblx0bGV0IGxpbmVzOiBzdHJpbmdbXSA9IFsnJywgJyddO1xyXG5cclxuXHRmdW5jdGlvbiBzZXJpYWxpemVQcm9wZXJ0eShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG5cdFx0Y29uc3QgaW5kZXggPSBsaW5lcy5sZW5ndGg7XHJcblx0XHRsaW5lcy5wdXNoKGAke2luZGVudH0vJHtrZXl9YCk7XHJcblx0XHRjb25zdCBzZXJpYWxpemVkID0gc2VyaWFsaXplVmFsdWUodmFsdWUpO1xyXG5cclxuXHRcdGlmIChzZXJpYWxpemVkKSB7XHJcblx0XHRcdGxpbmVzW2luZGV4XSArPSAnICcgKyBzZXJpYWxpemVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2VyaWFsaXplTnVtYmVyKHZhbHVlOiBudW1iZXIpIHtcclxuXHRcdGlmICgodmFsdWUgfCAwKSA9PT0gdmFsdWUpIHtcclxuXHRcdFx0cmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUudG9GaXhlZCgzKS5yZXBsYWNlKC8oXFxkKTArJC9nLCAnJDEnKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcblx0XHRcdHJldHVybiBzZXJpYWxpemVOdW1iZXIodmFsdWUpO1xyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdGxldCBlbmNvZGVkID0gJ1xcdTAwZmVcXHUwMGZmJztcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRjb25zdCBjaGFyQ29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XHJcblx0XHRcdFx0ZW5jb2RlZCArPSBgJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlID4+IDgpfSR7U3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSAmIDB4ZmYpfWA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBgKCR7ZW5jb2RlZH0pYDtcclxuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuXHRcdFx0aWYgKHZhbHVlLmV2ZXJ5KHggPT4gdHlwZW9mIHggPT09ICdudW1iZXInKSkge1xyXG5cdFx0XHRcdHJldHVybiBgWyAke3ZhbHVlLm1hcChzZXJpYWxpemVOdW1iZXIpLmpvaW4oJyAnKX0gXWA7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uc3QgdGVtcCA9IGluZGVudDtcclxuXHRcdFx0XHRpbmRlbnQgPSBpbmRlbnQgKyAnXFx0JztcclxuXHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0Y29uc3Qgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVZhbHVlKHZhbHVlW2ldKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoc2VyaWFsaXplZCkge1xyXG5cdFx0XHRcdFx0XHRsaW5lcy5wdXNoKGAke2luZGVudH0ke3NlcmlhbGl6ZWR9YCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpbmRlbnQgPSB0ZW1wO1xyXG5cdFx0XHRcdGxpbmVzLnB1c2goYCR7aW5kZW50fV1gKTtcclxuXHRcdFx0XHRyZXR1cm4gJ1snO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0bGluZXMucHVzaChgJHtpbmRlbnR9PDxgKTtcclxuXHRcdFx0Y29uc3QgdGVtcCA9IGluZGVudDtcclxuXHRcdFx0aW5kZW50ID0gaW5kZW50ICsgJ1xcdCc7XHJcblxyXG5cdFx0XHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcclxuXHRcdFx0XHRzZXJpYWxpemVQcm9wZXJ0eShrZXksIHZhbHVlW2tleV0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbmRlbnQgPSB0ZW1wO1xyXG5cdFx0XHRsaW5lcy5wdXNoKGAke2luZGVudH0+PmApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0fVxyXG5cclxuXHRzZXJpYWxpemVWYWx1ZShkYXRhKTtcclxuXHJcblx0Y29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobGluZXMucmVkdWNlKChzdW0sIGxpbmUpID0+IHN1bSArIGxpbmUubGVuZ3RoICsgMSwgMCkgLSAxKTtcclxuXHRsZXQgb2Zmc2V0ID0gMDtcclxuXHJcblx0Zm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmUubGVuZ3RoOyBpKysgLCBvZmZzZXQrKykge1xyXG5cdFx0XHRidWZmZXJbb2Zmc2V0XSA9IGxpbmUuY2hhckNvZGVBdChpKTtcclxuXHRcdH1cclxuXHJcblx0XHRidWZmZXJbb2Zmc2V0XSA9ICdcXG4nLmNoYXJDb2RlQXQoMCk7XHJcblx0XHRvZmZzZXQrKztcclxuXHR9XHJcblxyXG5cdC8vIGNvbnNvbGUubG9nKCdzZXJpYWxpemVkOlxcbicsIGxpbmVzLmpvaW4oJ1xcbicpKTtcclxuXHJcblx0cmV0dXJuIGJ1ZmZlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IkQ6XFxQcm9qZWN0c1xcZ2l0aHViXFxhZy1wc2RcXHNyYyJ9
