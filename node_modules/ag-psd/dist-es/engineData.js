export function parseEngineData(data) {
    var openBracket = '('.charCodeAt(0);
    var closeBracket = ')'.charCodeAt(0);
    var text = '';
    for (var i = 0; i < data.length; i++) {
        if (i < data.length - 3 && data[i] === openBracket && data[i + 1] === 0xfe && data[i + 2] === 0xff) {
            text += String.fromCharCode(data[i]);
            for (i += 3; i < (data.length - 1) && data[i] !== closeBracket; i += 2) {
                text += String.fromCharCode((data[i] << 8) | data[i + 1]);
            }
            i--;
        }
        else {
            text += String.fromCharCode(data[i]);
        }
    }
    var lines = text.split(/\n/g);
    var nodeStack = [];
    var propertyStack = [];
    var node = undefined;
    var property;
    function updateNode(propertyValue, nodeValue) {
        if (Array.isArray(nodeValue)) {
            nodeValue.push(node);
        }
        else if (nodeValue) {
            nodeValue[propertyValue] = node;
        }
    }
    var instructions = [
        {
            regex: /^<<$/,
            parse: function () {
                nodeStack.push(node);
                propertyStack.push(property);
                node = {};
                property = undefined;
            }
        },
        {
            regex: /^>>$/,
            parse: function () {
                var nodeValue = nodeStack.pop();
                var propertyValue = propertyStack.pop();
                if (nodeValue) {
                    updateNode(propertyValue, nodeValue);
                    node = nodeValue;
                }
            },
        },
        {
            regex: /^\[(.*)\]$/,
            parse: function (match) {
                var trimmed = match[1].trim();
                return trimmed ? trimmed.split(/ /g).map(parseTokens) : [];
            }
        },
        {
            regex: /^\/(\w+) \[$/,
            parse: function (match) {
                nodeStack.push(node);
                propertyStack.push(match[1]);
                node = [];
                property = undefined;
            }
        },
        {
            regex: /^\]$/,
            parse: function () {
                var nodeValue = nodeStack.pop();
                var propertyValue = propertyStack.pop();
                updateNode(propertyValue, nodeValue);
                node = nodeValue;
            }
        },
        {
            regex: /^\/([A-Z0-9]+)$/i,
            parse: function (match) {
                property = match[1];
            }
        },
        {
            regex: /^\/([A-Z0-9]+) ([^]*)$/i,
            parse: function (match) {
                property = match[1];
                var data = parseTokens(match[2]);
                if (Array.isArray(node)) {
                    node.push(data);
                }
                else if (node) {
                    node[property] = data;
                }
                return data;
            }
        },
        {
            regex: /^\(([^]*)\)$/m,
            parse: function (match) {
                return match[1]; // .trim();
            }
        },
        {
            regex: /^(-?\d*\.\d+)$/,
            parse: function (match) {
                return parseFloat(match[1]);
            }
        },
        {
            regex: /^(-?\d+)$/,
            parse: function (match) {
                return parseInt(match[1], 10);
            }
        },
        {
            regex: /^(true|false)$/,
            parse: function (match) {
                return match[1] === 'true';
            }
        },
        {
            regex: /^$/,
            parse: function () {
            }
        },
    ];
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var line = lines_1[_i];
        var cleaned = line.replace(/\t/g, '').trim();
        parseTokens(cleaned);
    }
    function parseTokens(line) {
        for (var _i = 0, instructions_1 = instructions; _i < instructions_1.length; _i++) {
            var _a = instructions_1[_i], regex = _a.regex, parse = _a.parse;
            var match = regex.exec(line);
            if (match) {
                return parse(match);
            }
        }
        throw new Error("Unparsed engine data line: " + line);
    }
    // console.log(JSON.stringify(node, null, 2)); // .substr(0, 1000));
    // require('fs').writeFileSync('engineData.json', JSON.stringify(node, null, 2), 'utf8');
    return node;
}
export function serializeEngineData(data) {
    var indent = '';
    var lines = ['', ''];
    function serializeProperty(key, value) {
        var index = lines.length;
        lines.push(indent + "/" + key);
        var serialized = serializeValue(value);
        if (serialized) {
            lines[index] += ' ' + serialized;
        }
    }
    function serializeNumber(value) {
        if ((value | 0) === value) {
            return value.toString();
        }
        else {
            return value.toFixed(3).replace(/(\d)0+$/g, '$1');
        }
    }
    function serializeValue(value) {
        if (typeof value === 'number') {
            return serializeNumber(value);
        }
        else if (typeof value === 'boolean') {
            return value ? 'true' : 'false';
        }
        else if (typeof value === 'string') {
            var encoded = '\u00fe\u00ff';
            for (var i = 0; i < value.length; i++) {
                var charCode = value.charCodeAt(i);
                encoded += "" + String.fromCharCode(charCode >> 8) + String.fromCharCode(charCode & 0xff);
            }
            return "(" + encoded + ")";
        }
        else if (Array.isArray(value)) {
            if (value.every(function (x) { return typeof x === 'number'; })) {
                return "[ " + value.map(serializeNumber).join(' ') + " ]";
            }
            else {
                var temp = indent;
                indent = indent + '\t';
                for (var i = 0; i < value.length; i++) {
                    var serialized = serializeValue(value[i]);
                    if (serialized) {
                        lines.push("" + indent + serialized);
                    }
                }
                indent = temp;
                lines.push(indent + "]");
                return '[';
            }
        }
        else if (typeof value === 'object') {
            lines.push(indent + "<<");
            var temp = indent;
            indent = indent + '\t';
            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                var key = _a[_i];
                serializeProperty(key, value[key]);
            }
            indent = temp;
            lines.push(indent + ">>");
        }
        return undefined;
    }
    serializeValue(data);
    var buffer = new Uint8Array(lines.reduce(function (sum, line) { return sum + line.length + 1; }, 0) - 1);
    var offset = 0;
    for (var _i = 0, lines_2 = lines; _i < lines_2.length; _i++) {
        var line = lines_2[_i];
        for (var i = 0; i < line.length; i++, offset++) {
            buffer[offset] = line.charCodeAt(i);
        }
        buffer[offset] = '\n'.charCodeAt(0);
        offset++;
    }
    // console.log('serialized:\n', lines.join('\n'));
    return buffer;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
