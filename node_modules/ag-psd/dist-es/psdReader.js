import { toBlendMode } from './psd';
import { resetCanvas, offsetForChannel, readDataRLE, decodeBitmap, readDataRaw, createCanvas } from './helpers';
import { getHandler } from './additionalInfo';
import { getHandler as getResourceHandler } from './imageResources';
var supportedColorModes = [0 /* Bitmap */, 1 /* Grayscale */, 3 /* RGB */];
function setupGrayscale(data) {
    var size = data.width * data.height * 4;
    for (var i = 0; i < size; i += 4) {
        data.data[i + 1] = data.data[i];
        data.data[i + 2] = data.data[i];
    }
}
export function readUint8(reader) {
    reader.offset += 1;
    return reader.view.getUint8(reader.offset - 1);
}
export function peekUint8(reader) {
    return reader.view.getUint8(reader.offset);
}
export function readInt16(reader) {
    reader.offset += 2;
    return reader.view.getInt16(reader.offset - 2, false);
}
export function readUint16(reader) {
    reader.offset += 2;
    return reader.view.getUint16(reader.offset - 2, false);
}
export function readInt32(reader) {
    reader.offset += 4;
    return reader.view.getInt32(reader.offset - 4, false);
}
export function readInt32LE(reader) {
    reader.offset += 4;
    return reader.view.getInt32(reader.offset - 4, true);
}
export function readUint32(reader) {
    reader.offset += 4;
    return reader.view.getUint32(reader.offset - 4, false);
}
export function readFloat32(reader) {
    reader.offset += 8;
    return reader.view.getFloat32(reader.offset - 8, false);
}
export function readFloat64(reader) {
    reader.offset += 8;
    return reader.view.getFloat64(reader.offset - 8, false);
}
export function readBytes(reader, length) {
    reader.offset += length;
    return new Uint8Array(reader.view.buffer, reader.view.byteOffset + reader.offset - length, length);
}
export function createReader(buffer, offset, length) {
    var view = new DataView(buffer, offset, length);
    return { view: view, offset: 0 };
}
export function readPsd(reader, options) {
    if (options === void 0) { options = {}; }
    var psd = readHeader(reader);
    readColorModeData(reader, psd);
    readImageResources(reader, psd, options);
    var globalAlpha = readLayerAndMaskInfo(reader, psd, !!options.skipLayerImageData);
    var hasChildren = psd.children && psd.children.length;
    var skipComposite = options.skipCompositeImageData && (options.skipLayerImageData || hasChildren);
    if (!skipComposite) {
        readImageData(reader, psd, globalAlpha);
    }
    return psd;
}
export function readSignature(reader) {
    return readShortString(reader, 4);
}
export function readPascalString(reader, padTo) {
    if (padTo === void 0) { padTo = 2; }
    var length = readUint8(reader);
    var text = readShortString(reader, length);
    while (++length % padTo) {
        skipBytes(reader, 1);
    }
    return text;
}
export function readUnicodeString(reader) {
    var length = readUint32(reader);
    return readUnicodeStringWithLength(reader, length);
}
export function readUnicodeStringWithLength(reader, length) {
    var text = '';
    while (length--) {
        var value = readUint16(reader);
        if (value || length > 0) { // remove trailing \0
            text += String.fromCharCode(value);
        }
    }
    return text;
}
export function readAsciiString(reader, length) {
    var text = '';
    while (length--) {
        text += String.fromCharCode(readUint8(reader));
    }
    return text;
}
export function skipBytes(reader, count) {
    reader.offset += count;
}
export function checkSignature(reader) {
    var expected = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        expected[_i - 1] = arguments[_i];
    }
    var offset = reader.offset;
    var signature = readSignature(reader);
    /* istanbul ignore if */
    if (expected.indexOf(signature) === -1) {
        throw new Error("Invalid signature: '" + signature + "' at 0x" + offset.toString(16));
    }
}
function readShortString(reader, length) {
    var buffer = readBytes(reader, length);
    return String.fromCharCode.apply(String, buffer);
}
function readHeader(reader) {
    checkSignature(reader, '8BPS');
    var version = readUint16(reader);
    /* istanbul ignore if */
    if (version !== 1)
        throw new Error("Invalid PSD file version: " + version);
    skipBytes(reader, 6);
    var channels = readUint16(reader);
    var height = readUint32(reader);
    var width = readUint32(reader);
    var bitsPerChannel = readUint16(reader);
    var colorMode = readUint16(reader);
    /* istanbul ignore if */
    if (supportedColorModes.indexOf(colorMode) === -1)
        throw new Error("Color mode not supported: " + colorMode);
    return { width: width, height: height, channels: channels, bitsPerChannel: bitsPerChannel, colorMode: colorMode };
}
function readColorModeData(reader, _psd) {
    readSection(reader, 1, function () {
        throw new Error('Not Implemented: color mode data');
    });
}
function readImageResources(reader, psd, options) {
    readSection(reader, 1, function (left) {
        while (left()) {
            readImageResource(reader, psd, options);
        }
    });
}
function readImageResource(reader, psd, options) {
    checkSignature(reader, '8BIM');
    var id = readUint16(reader);
    var name = readPascalString(reader);
    readSection(reader, 2, function (left) {
        var handler = getResourceHandler(id, name);
        var skip = id === 1036 && !!options.skipThumbnail;
        if (!psd.imageResources) {
            psd.imageResources = {};
        }
        if (handler && !skip) {
            handler.read(reader, psd.imageResources, left);
        }
        else {
            //console.log(`Image resource: ${id} ${name} ${getImageResourceName(id).substr(0, 90) }`);
            skipBytes(reader, left());
        }
    });
}
function readLayerAndMaskInfo(reader, psd, skipImageData) {
    var globalAlpha = false;
    readSection(reader, 1, function (left) {
        globalAlpha = readLayerInfo(reader, psd, skipImageData);
        // SAI does not include this section
        if (left() > 0) {
            readGlobalLayerMaskInfo(reader);
        }
        else {
            // revert back to end of section if exceeded section limits
            skipBytes(reader, left());
        }
        while (left() > 0) {
            // sometimes there are empty bytes here
            while (left() && peekUint8(reader) === 0) {
                skipBytes(reader, 1);
            }
            if (left() >= 12) {
                readAdditionalLayerInfo(reader, psd);
            }
            else {
                skipBytes(reader, left());
            }
        }
    });
    return globalAlpha;
}
function readLayerInfo(reader, psd, skipImageData) {
    var globalAlpha = false;
    readSection(reader, 2, function (left) {
        var layerCount = readInt16(reader);
        if (layerCount < 0) {
            globalAlpha = true;
            layerCount = -layerCount;
        }
        var layers = [];
        var layerChannels = [];
        for (var i = 0; i < layerCount; i++) {
            var _a = readLayerRecord(reader), layer = _a.layer, channels = _a.channels;
            layers.push(layer);
            layerChannels.push(channels);
        }
        if (!skipImageData) {
            for (var i = 0; i < layerCount; i++) {
                readLayerChannelImageData(reader, psd, layers[i], layerChannels[i]);
            }
        }
        skipBytes(reader, left());
        if (!psd.children) {
            psd.children = [];
        }
        var stack = [psd];
        for (var i = layers.length - 1; i >= 0; i--) {
            var l = layers[i];
            var type = l.sectionDivider ? l.sectionDivider.type : 0 /* Other */;
            if (type === 1 /* OpenFolder */ || type === 2 /* ClosedFolder */) {
                l.opened = type === 1 /* OpenFolder */;
                l.children = [];
                stack[stack.length - 1].children.unshift(l);
                stack.push(l);
            }
            else if (type === 3 /* BoundingSectionDivider */) {
                stack.pop();
            }
            else {
                stack[stack.length - 1].children.unshift(l);
            }
        }
    });
    return globalAlpha;
}
function readLayerRecord(reader) {
    var layer = {};
    layer.top = readInt32(reader);
    layer.left = readInt32(reader);
    layer.bottom = readInt32(reader);
    layer.right = readInt32(reader);
    var channelCount = readUint16(reader);
    var channels = [];
    for (var i = 0; i < channelCount; i++) {
        var channelID = readInt16(reader);
        var channelLength = readInt32(reader);
        channels.push({ id: channelID, length: channelLength });
    }
    checkSignature(reader, '8BIM');
    var blendMode = readSignature(reader);
    /* istanbul ignore if */
    if (!toBlendMode[blendMode])
        throw new Error("Invalid blend mode: '" + blendMode + "'");
    layer.blendMode = toBlendMode[blendMode];
    layer.opacity = readUint8(reader);
    layer.clipping = readUint8(reader) === 1;
    var flags = readUint8(reader);
    layer.transparencyProtected = (flags & 0x01) !== 0;
    layer.hidden = (flags & 0x02) !== 0;
    skipBytes(reader, 1);
    readSection(reader, 1, function (left) {
        readLayerMaskData(reader);
        readLayerBlendingRanges(reader);
        layer.name = readPascalString(reader, 4);
        while (left()) {
            readAdditionalLayerInfo(reader, layer);
        }
    });
    return { layer: layer, channels: channels };
}
function readLayerMaskData(reader) {
    readSection(reader, 1, function (left) {
        /* istanbul ignore if */
        if (left()) {
            throw new Error("Not Implemented: layer mask data");
        }
    });
}
function readLayerBlendingRanges(reader) {
    return readSection(reader, 1, function (left) {
        var compositeGrayBlendSource = readUint32(reader);
        var compositeGraphBlendDestinationRange = readUint32(reader);
        var ranges = [];
        while (left()) {
            var sourceRange = readUint32(reader);
            var destRange = readUint32(reader);
            ranges.push({ sourceRange: sourceRange, destRange: destRange });
        }
        return { compositeGrayBlendSource: compositeGrayBlendSource, compositeGraphBlendDestinationRange: compositeGraphBlendDestinationRange, ranges: ranges };
    });
}
function readLayerChannelImageData(reader, psd, layer, channels) {
    var layerWidth = (layer.right || 0) - (layer.left || 0);
    var layerHeight = (layer.bottom || 0) - (layer.top || 0);
    var canvas;
    var context;
    var data;
    if (layerWidth && layerHeight) {
        canvas = createCanvas(layerWidth, layerHeight);
        context = canvas.getContext('2d');
        data = context.createImageData(layerWidth, layerHeight);
        resetCanvas(data);
    }
    for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {
        var channel = channels_1[_i];
        var compression = readUint16(reader);
        var offset = offsetForChannel(channel.id);
        /* istanbul ignore if */
        if (offset < 0) {
            throw new Error("Channel not supported: " + channel.id);
        }
        if (compression === 0 /* RawData */) {
            readDataRaw(reader, data, offset, layerWidth, layerHeight);
        }
        else if (compression === 1 /* RleCompressed */) {
            readDataRLE(reader, data, layerWidth, layerHeight, 4, [offset]);
        }
        else {
            throw new Error("Compression type not supported: " + compression);
        }
        if (data && psd.colorMode === 1 /* Grayscale */) {
            setupGrayscale(data);
        }
    }
    if (context && data) {
        context.putImageData(data, 0, 0);
        layer.canvas = canvas;
    }
}
function readGlobalLayerMaskInfo(reader) {
    return readSection(reader, 1, function (left) {
        if (left()) {
            var overlayColorSpace = readUint16(reader);
            var colorSpace1 = readUint16(reader);
            var colorSpace2 = readUint16(reader);
            var colorSpace3 = readUint16(reader);
            var colorSpace4 = readUint16(reader);
            var opacity = readUint16(reader);
            var kind = readUint8(reader);
            skipBytes(reader, left());
            return { overlayColorSpace: overlayColorSpace, colorSpace1: colorSpace1, colorSpace2: colorSpace2, colorSpace3: colorSpace3, colorSpace4: colorSpace4, opacity: opacity, kind: kind };
        }
    });
}
function readAdditionalLayerInfo(reader, target) {
    checkSignature(reader, '8BIM', '8B64');
    var key = readSignature(reader);
    readSection(reader, 2, function (left) {
        var handler = getHandler(key);
        if (handler) {
            handler.read(reader, target, left);
        }
        else {
            console.log("Unhandled additional info: " + key);
            skipBytes(reader, left());
        }
        if (left()) {
            console.log("Unread " + left() + " bytes left for tag: " + key);
            skipBytes(reader, left());
        }
    });
}
function readImageData(reader, psd, globalAlpha) {
    var compression = readUint16(reader);
    if (supportedColorModes.indexOf(psd.colorMode) === -1)
        throw new Error("Color mode not supported: " + psd.colorMode);
    if (compression !== 0 /* RawData */ && compression !== 1 /* RleCompressed */)
        throw new Error("Compression type not supported: " + compression);
    var canvas = createCanvas(psd.width, psd.height);
    var context = canvas.getContext('2d');
    var data = context.createImageData(psd.width, psd.height);
    resetCanvas(data);
    if (psd.colorMode === 0 /* Bitmap */) {
        var bytes = void 0;
        if (compression === 0 /* RawData */) {
            bytes = readBytes(reader, Math.ceil(psd.width / 8) * psd.height);
        }
        else if (compression === 1 /* RleCompressed */) {
            bytes = new Uint8Array(psd.width * psd.height);
            readDataRLE(reader, { data: bytes, width: psd.width, height: psd.height }, psd.width, psd.height, 1, [0]);
        }
        else {
            throw new Error("Unsupported compression: " + compression);
        }
        decodeBitmap(bytes, data.data, psd.width, psd.height);
    }
    else { // Grayscale | RGB
        var channels = psd.colorMode === 3 /* RGB */ ? [0, 1, 2] : [0];
        if (psd.channels && psd.channels > 3) {
            for (var i = 3; i < psd.channels; i++) {
                channels.push(i);
            }
        }
        else if (globalAlpha) {
            channels.push(3);
        }
        if (compression === 0 /* RawData */) {
            for (var i = 0; i < channels.length; i++) {
                readDataRaw(reader, data, channels[i], psd.width, psd.height);
            }
        }
        else if (compression === 1 /* RleCompressed */) {
            readDataRLE(reader, data, psd.width, psd.height, 4, channels);
        }
        if (psd.colorMode === 1 /* Grayscale */) {
            setupGrayscale(data);
        }
    }
    context.putImageData(data, 0, 0);
    psd.canvas = canvas;
}
function readSection(reader, round, func) {
    var length = readInt32(reader);
    if (length <= 0) {
        return undefined;
    }
    var end = reader.offset + length;
    var result = func(function () { return end - reader.offset; });
    /* istanbul ignore if */
    if (reader.offset > end) {
        throw new Error('Exceeded section limits');
    }
    /* istanbul ignore if */
    if (reader.offset !== end) {
        throw new Error("Unread section data: " + (end - reader.offset) + " bytes at 0x" + reader.offset.toString(16));
    }
    while (end % round) {
        end++;
    }
    reader.offset = end;
    return result;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
