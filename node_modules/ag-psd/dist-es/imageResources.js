import { readPascalString, readUnicodeString, readUint32, readUint16, readUint8, readFloat64, readBytes, skipBytes } from './psdReader';
import { writePascalString, writeUnicodeString, writeUint32, writeUint8, writeFloat64, writeUint16, writeBytes } from './psdWriter';
import { createCanvasFromData } from './helpers';
import { toByteArray } from 'base64-js';
var handlers = [];
var handlersMap = {};
function addHandler(key, has, read, write) {
    var handler = { key: key, has: has, read: read, write: write };
    handlers.push(handler);
    handlersMap[handler.key] = handler;
}
export function getHandler(key, _name) {
    return handlersMap[key];
}
export function getHandlers() {
    return handlers;
}
// 32-bit fixed-point number 16.16
function readFixedPoint32(reader) {
    return readUint32(reader) / (1 << 16);
}
// 32-bit fixed-point number 16.16
function writeFixedPoint32(writer, value) {
    writeUint32(writer, value * (1 << 16));
}
var RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];
var MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];
addHandler(1005, function (target) { return typeof target.resolutionInfo !== 'undefined'; }, function (reader, target) {
    var horizontalResolution = readFixedPoint32(reader);
    var horizontalResolutionUnit = readUint16(reader);
    var widthUnit = readUint16(reader);
    var verticalResolution = readFixedPoint32(reader);
    var verticalResolutionUnit = readUint16(reader);
    var heightUnit = readUint16(reader);
    target.resolutionInfo = {
        horizontalResolution: horizontalResolution,
        horizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',
        widthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches',
        verticalResolution: verticalResolution,
        verticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',
        heightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches',
    };
}, function (writer, target) {
    var info = target.resolutionInfo;
    writeFixedPoint32(writer, info.horizontalResolution || 0);
    writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));
    writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));
    writeFixedPoint32(writer, info.verticalResolution || 0);
    writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));
    writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));
});
addHandler(1006, function (target) { return typeof target.alphaChannelNames !== 'undefined'; }, function (reader, target, left) {
    target.alphaChannelNames = [];
    while (left()) {
        target.alphaChannelNames.push(readPascalString(reader, 1));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {
        var name_1 = _a[_i];
        writePascalString(writer, name_1);
    }
});
addHandler(1024, function (target) { return typeof target.layerState !== 'undefined'; }, function (reader, target) {
    target.layerState = readUint16(reader);
}, function (writer, target) {
    writeUint16(writer, target.layerState);
});
addHandler(1026, function (target) { return typeof target.layersGroup !== 'undefined'; }, function (reader, target, left) {
    target.layersGroup = [];
    while (left()) {
        target.layersGroup.push(readUint16(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.layersGroup; _i < _a.length; _i++) {
        var g = _a[_i];
        writeUint32(writer, g);
    }
});
addHandler(1032, function (target) { return typeof target.gridAndGuidesInformation !== 'undefined'; }, function (reader, target) {
    target.gridAndGuidesInformation = {
        version: readUint32(reader),
        grid: {
            horizontal: readUint32(reader),
            vertical: readUint32(reader),
        },
        guides: [],
    };
    var count = readUint32(reader);
    while (count--) {
        target.gridAndGuidesInformation.guides.push({
            location: readUint32(reader) / 32,
            direction: readUint8(reader) ? 'horizontal' : 'vertical'
        });
    }
}, function (writer, target) {
    var info = target.gridAndGuidesInformation;
    var version = info.version || 1;
    var grid = info.grid || { horizontal: 18 * 32, vertical: 18 * 32 };
    var guides = info.guides || [];
    writeUint32(writer, version);
    writeUint32(writer, grid.horizontal);
    writeUint32(writer, grid.vertical);
    writeUint32(writer, guides.length);
    guides.forEach(function (g) {
        writeUint32(writer, g.location * 32);
        writeUint8(writer, g.direction === 'horizontal' ? 1 : 0);
    });
});
addHandler(1037, function (target) { return typeof target.globalAngle !== 'undefined'; }, function (reader, target) {
    target.globalAngle = readUint32(reader);
}, function (writer, target) {
    writeUint32(writer, target.globalAngle);
});
addHandler(1045, function (target) { return typeof target.unicodeAlphaNames !== 'undefined'; }, function (reader, target, left) {
    target.unicodeAlphaNames = [];
    while (left()) {
        target.unicodeAlphaNames.push(readUnicodeString(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.unicodeAlphaNames; _i < _a.length; _i++) {
        var name_2 = _a[_i];
        writeUnicodeString(writer, name_2);
    }
});
addHandler(1049, function (target) { return typeof target.globalAltitude !== 'undefined'; }, function (reader, target) {
    target.globalAltitude = readUint32(reader);
}, function (writer, target) {
    writeUint32(writer, target.globalAltitude);
});
addHandler(1053, function (target) { return typeof target.alphaIdentifiers !== 'undefined'; }, function (reader, target, left) {
    target.alphaIdentifiers = [];
    while (left() >= 4) {
        target.alphaIdentifiers.push(readUint32(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++) {
        var id = _a[_i];
        writeUint32(writer, id);
    }
});
addHandler(1054, function (target) { return typeof target.urlsList !== 'undefined'; }, function (reader, target) {
    var count = readUint32(reader);
    target.urlsList = [];
    if (count)
        throw new Error('Not implemented: URL List');
}, function (writer, target) {
    writeUint32(writer, target.urlsList.length);
    if (target.urlsList.length)
        throw new Error('Not implemented: URL List');
});
addHandler(1057, function (target) { return typeof target.versionInfo !== 'undefined'; }, function (reader, target) {
    target.versionInfo = {
        version: readUint32(reader),
        hasRealMergedData: !!readUint8(reader),
        writerName: readUnicodeString(reader),
        readerName: readUnicodeString(reader),
        fileVersion: readUint32(reader),
    };
}, function (writer, target) {
    var versionInfo = target.versionInfo;
    writeUint32(writer, versionInfo.version);
    writeUint8(writer, versionInfo.hasRealMergedData ? 1 : 0);
    writeUnicodeString(writer, versionInfo.writerName);
    writeUnicodeString(writer, versionInfo.readerName);
    writeUint32(writer, versionInfo.fileVersion);
});
addHandler(1064, function (target) { return typeof target.pixelAspectRatio !== 'undefined'; }, function (reader, target) {
    target.pixelAspectRatio = {
        version: readUint32(reader),
        aspect: readFloat64(reader),
    };
}, function (writer, target) {
    writeUint32(writer, target.pixelAspectRatio.version);
    writeFloat64(writer, target.pixelAspectRatio.aspect);
});
addHandler(1069, function (target) { return typeof target.layerSelectionIds !== 'undefined'; }, function (reader, target) {
    var count = readUint16(reader);
    target.layerSelectionIds = [];
    while (count--) {
        target.layerSelectionIds.push(readUint32(reader));
    }
}, function (writer, target) {
    writeUint16(writer, target.layerSelectionIds.length);
    for (var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++) {
        var id = _a[_i];
        writeUint32(writer, id);
    }
});
addHandler(1072, function (target) { return typeof target.layerGroupsEnabledId !== 'undefined'; }, function (reader, target, left) {
    target.layerGroupsEnabledId = [];
    while (left()) {
        target.layerGroupsEnabledId.push(readUint8(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++) {
        var id = _a[_i];
        writeUint8(writer, id);
    }
});
addHandler(1036, function (target) { return typeof target.thumbnail !== 'undefined'; }, function (reader, target, left) {
    var format = readUint32(reader); // 1 = kJpegRGB, 0 = kRawRGB
    var width = readUint32(reader);
    var height = readUint32(reader);
    var widthBytes = readUint32(reader); // = (width * bits_per_pixel + 31) / 32 * 4.
    var totalSize = readUint32(reader); // = widthBytes * height * planes
    var sizeAfterCompression = readUint32(reader);
    var bitsPerPixel = readUint16(reader); // 24
    var planes = readUint16(reader); // 1
    if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {
        console.log("invalid thumbnail data (format: " + format + ", bitsPerPixel: " + bitsPerPixel + ", planes: " + planes + ")");
        skipBytes(reader, left());
        return;
    }
    width;
    height;
    widthBytes;
    totalSize;
    sizeAfterCompression;
    var size = left();
    var bytes = readBytes(reader, size);
    target.thumbnail = createCanvasFromData(bytes);
}, function (writer, target) {
    var thumb = target.thumbnail;
    var data = toByteArray(thumb.toDataURL('image/jpeg').substr('data:image/jpeg;base64,'.length));
    var bitsPerPixel = 24;
    var widthBytes = (thumb.width * bitsPerPixel + 31) / 32 * 4;
    var planes = 1;
    var totalSize = widthBytes * thumb.height * planes;
    var sizeAfterCompression = data.length;
    writeUint32(writer, 1); // 1 = kJpegRGB
    writeUint32(writer, thumb.width);
    writeUint32(writer, thumb.height);
    writeUint32(writer, widthBytes);
    writeUint32(writer, totalSize);
    writeUint32(writer, sizeAfterCompression);
    writeUint16(writer, bitsPerPixel);
    writeUint16(writer, planes);
    writeBytes(writer, data);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
