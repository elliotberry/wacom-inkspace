import { readColor } from './helpers';
import { checkSignature, readSignature, skipBytes, readUint16, readUint8, readUint32, readInt32 } from './psdReader';
function readBlendMode(reader) {
    checkSignature(reader, '8BIM');
    return readSignature(reader);
}
function readShadowInfo(reader) {
    var size = readUint32(reader);
    var version = readUint32(reader);
    if (size !== 41 && size !== 51)
        throw new Error("Invalid effects shadow info size: " + size);
    if (version !== 0 && version !== 2)
        throw new Error("Invalid effects shadow info version: " + version);
    var blur = readInt32(reader);
    var intensity = readInt32(reader);
    var angle = readInt32(reader);
    var distance = readInt32(reader);
    var color = readColor(reader);
    var blendMode = readBlendMode(reader);
    var enabled = !!readUint8(reader);
    var useAngleInAllEffects = !!readUint8(reader);
    var opacity = readUint8(reader);
    var nativeColor = size >= 51 ? readColor(reader) : undefined;
    return { blur: blur, intensity: intensity, angle: angle, distance: distance, color: color, blendMode: blendMode, enabled: enabled, useAngleInAllEffects: useAngleInAllEffects, opacity: opacity, nativeColor: nativeColor };
}
function readOuterGlowInfo(reader) {
    var size = readUint32(reader);
    var version = readUint32(reader);
    if (size !== 32 && size !== 42)
        throw new Error("Invalid effects outer glow info size: " + size);
    if (version !== 0 && version !== 2)
        throw new Error("Invalid effects outer glow info version: " + version);
    var blur = readUint32(reader);
    var intensity = readUint32(reader);
    var color = readColor(reader);
    var blendMode = readBlendMode(reader);
    var enabled = !!readUint8(reader);
    var opacity = readUint8(reader);
    var nativeColor = size >= 42 ? readColor(reader) : undefined;
    return { blur: blur, intensity: intensity, color: color, blendMode: blendMode, enabled: enabled, opacity: opacity, nativeColor: nativeColor };
}
function readInnerGlowInfo(reader) {
    var size = readUint32(reader);
    var version = readUint32(reader);
    if (size !== 33 && size !== 43)
        throw new Error("Invalid effects inner glow info size: " + size);
    if (version !== 0 && version !== 2)
        throw new Error("Invalid effects inner glow info version: " + version);
    var blur = readUint32(reader);
    var intensity = readUint32(reader);
    var color = readColor(reader);
    var blendMode = readBlendMode(reader);
    var enabled = !!readUint8(reader);
    var opacity = readUint8(reader);
    var invert = size >= 43 ? !!readUint8(reader) : undefined;
    var nativeColor = size >= 43 ? readColor(reader) : undefined;
    return { blur: blur, intensity: intensity, color: color, blendMode: blendMode, enabled: enabled, opacity: opacity, invert: invert, nativeColor: nativeColor };
}
function readBevelInfo(reader) {
    var size = readUint32(reader);
    var version = readUint32(reader);
    if (size !== 58 && size !== 78)
        throw new Error("Invalid effects bevel info size: " + size);
    if (version !== 0 && version !== 2)
        throw new Error("Invalid effects bevel info version: " + version);
    var angle = readUint32(reader);
    var strength = readUint32(reader);
    var blur = readUint32(reader);
    var highlightBlendMode = readBlendMode(reader);
    var shadowBlendMode = readBlendMode(reader);
    var highlightColor = readColor(reader);
    var shadowColor = readColor(reader);
    var bevelStyle = readUint8(reader);
    var highlightOpacity = readUint8(reader);
    var shadowOpacity = readUint8(reader);
    var enabled = !!readUint8(reader);
    var useAngleInAllEffects = !!readUint8(reader);
    var up = !!readUint8(reader);
    var realHighlightColor = size >= 78 ? readColor(reader) : undefined;
    var realShadowColor = size >= 78 ? readColor(reader) : undefined;
    return {
        angle: angle, strength: strength, blur: blur, highlightBlendMode: highlightBlendMode, shadowBlendMode: shadowBlendMode, highlightColor: highlightColor, shadowColor: shadowColor,
        bevelStyle: bevelStyle, highlightOpacity: highlightOpacity, shadowOpacity: shadowOpacity, enabled: enabled, useAngleInAllEffects: useAngleInAllEffects, up: up,
        realHighlightColor: realHighlightColor, realShadowColor: realShadowColor
    };
}
function readSolidFillInfo(reader) {
    var size = readUint32(reader);
    var version = readUint32(reader);
    if (size !== 34)
        throw new Error("Invalid effects solid fill info size: " + size);
    if (version !== 2)
        throw new Error("Invalid effects solid fill info version: " + version);
    var blendMode = readBlendMode(reader);
    var color = readColor(reader);
    var opacity = readUint8(reader);
    var enabled = !!readUint8(reader);
    var nativeColor = readColor(reader);
    return { blendMode: blendMode, color: color, opacity: opacity, enabled: enabled, nativeColor: nativeColor };
}
export function readEffects(reader) {
    var version = readUint16(reader);
    if (version !== 0)
        throw new Error("Invalid effects layer version: " + version);
    var effectsCount = readUint16(reader);
    var effects = {};
    for (var i = 0; i < effectsCount; i++) {
        checkSignature(reader, '8BIM');
        var type = readSignature(reader);
        switch (type) {
            case 'cmnS': // common state (see See Effects layer, common state info)
                var size = readUint32(reader);
                var version_1 = readUint32(reader);
                var visible = !!readUint8(reader);
                skipBytes(reader, 2);
                if (size !== 7 || version_1 !== 0 || !visible)
                    throw new Error("Invalid effects common state");
                break;
            case 'dsdw': // drop shadow (see See Effects layer, drop shadow and inner shadow info)
                effects.dropShadow = readShadowInfo(reader);
                break;
            case 'isdw': // inner shadow (see See Effects layer, drop shadow and inner shadow info)
                effects.innerShadow = readShadowInfo(reader);
                break;
            case 'oglw': // outer glow (see See Effects layer, outer glow info)
                effects.outerGlow = readOuterGlowInfo(reader);
                break;
            case 'iglw': // inner glow (see See Effects layer, inner glow info)
                effects.innerGlow = readInnerGlowInfo(reader);
                break;
            case 'bevl': // bevel (see See Effects layer, bevel info)
                effects.bevel = readBevelInfo(reader);
                break;
            case 'sofi': // solid fill ( Photoshop 7.0) (see See Effects layer, solid fill (added in Photoshop 7.0))
                effects.solidFill = readSolidFillInfo(reader);
                break;
            default:
                throw new Error("Invalid effect type: '" + type + "'");
        }
    }
    return effects;
}
export function writeEffects(_writer, _effects) {
    throw new Error('Not implemented');
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
