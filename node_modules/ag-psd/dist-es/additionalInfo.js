import { readEffects, writeEffects } from './effectsHelpers';
import { readColor, toArray } from './helpers';
import { readSignature, readUnicodeString, skipBytes, readUint32, readUint8, readFloat64, readUint16, readBytes, readAsciiString, readInt32, readFloat32, readInt32LE, readUnicodeStringWithLength } from './psdReader';
import { writeZeros, writeUnicodeString, writeSignature, writeBytes, writeUint32, writeUint16, writeFloat64, writeUint8 } from './psdWriter';
var handlers = [];
var handlersMap = {};
function addHandler(key, has, read, write) {
    var handler = { key: key, has: has, read: read, write: write };
    handlers.push(handler);
    handlersMap[handler.key] = handler;
}
export function getHandler(key) {
    return handlersMap[key];
}
export function getHandlers() {
    return handlers;
}
addHandler('luni', function (target) { return typeof target.name !== 'undefined'; }, function (reader, target, left) {
    target.name = readUnicodeString(reader);
    skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    writeUnicodeString(writer, target.name);
});
addHandler('lnsr', function (target) { return typeof target.nameSource !== 'undefined'; }, function (reader, target) { return target.nameSource = readSignature(reader); }, function (writer, target) { return writeSignature(writer, target.nameSource); });
addHandler('lyid', function (target) { return typeof target.id !== 'undefined'; }, function (reader, target) { return target.id = readUint32(reader); }, function (writer, target) { return writeUint32(writer, target.id); });
addHandler('clbl', function (target) { return typeof target.blendClippendElements !== 'undefined'; }, function (reader, target) {
    target.blendClippendElements = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.blendClippendElements ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('infx', function (target) { return typeof target.blendInteriorElements !== 'undefined'; }, function (reader, target) {
    target.blendInteriorElements = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.blendInteriorElements ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('knko', function (target) { return typeof target.knockout !== 'undefined'; }, function (reader, target) {
    target.knockout = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.knockout ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('lspf', function (target) { return typeof target.protected !== 'undefined'; }, function (reader, target) {
    var flags = readUint32(reader);
    target.protected = {
        transparency: (flags & 0x01) !== 0,
        composite: (flags & 0x02) !== 0,
        position: (flags & 0x04) !== 0,
    };
}, function (writer, target) {
    var flags = (target.protected.transparency ? 0x01 : 0) |
        (target.protected.composite ? 0x02 : 0) |
        (target.protected.position ? 0x04 : 0);
    writeUint32(writer, flags);
});
addHandler('lclr', function (target) { return typeof target.sheetColors !== 'undefined'; }, function (reader, target) {
    target.sheetColors = {
        color1: readUint32(reader),
        color2: readUint32(reader),
    };
}, function (writer, target) {
    writeUint32(writer, target.sheetColors.color1);
    writeUint32(writer, target.sheetColors.color2);
});
addHandler('fxrp', function (target) { return typeof target.referencePoint !== 'undefined'; }, function (reader, target) {
    target.referencePoint = {
        x: readFloat64(reader),
        y: readFloat64(reader),
    };
}, function (writer, target) {
    writeFloat64(writer, target.referencePoint.x);
    writeFloat64(writer, target.referencePoint.y);
});
addHandler('lsct', function (target) { return typeof target.sectionDivider !== 'undefined'; }, function (reader, target, left) {
    var item = {};
    item.type = readUint32(reader);
    if (left()) {
        var signature = readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        item.key = readSignature(reader);
    }
    if (left()) {
        // 0 = normal
        // 1 = scene group, affects the animation timeline.
        item.subType = readUint32(reader);
    }
    target.sectionDivider = item;
}, function (writer, target) {
    writeUint32(writer, target.sectionDivider.type);
    if (target.sectionDivider.key) {
        writeSignature(writer, '8BIM');
        writeSignature(writer, target.sectionDivider.key);
        if (typeof target.sectionDivider.subtype !== 'undefined')
            writeUint32(writer, target.sectionDivider.subtype);
    }
});
addHandler('FMsk', function (target) { return typeof target.filterMask !== 'undefined'; }, function (reader, target) {
    target.filterMask = {
        colorSpace: readColor(reader),
        opacity: readUint16(reader),
    };
}, function (writer, target) {
    writeBytes(writer, new Uint8Array(target.filterMask.colorSpace));
    writeUint16(writer, target.filterMask.opacity);
});
addHandler('shmd', function (target) { return typeof target.metadata !== 'undefined'; }, function (reader, target) {
    var count = readUint32(reader);
    target.metadata = [];
    for (var i = 0; i < count; i++) {
        var signature = readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        var key = readSignature(reader);
        var copy = !!readUint8(reader);
        skipBytes(reader, 3);
        var length_1 = readUint32(reader);
        var data = toArray(readBytes(reader, length_1));
        target.metadata.push({ key: key, copy: copy, data: data });
    }
}, function (writer, target) {
    writeUint32(writer, target.metadata.length);
    for (var i = 0; i < target.metadata.length; i++) {
        var item = target.metadata[i];
        writeSignature(writer, '8BIM');
        writeSignature(writer, item.key);
        writeUint8(writer, item.copy ? 1 : 0);
        writeZeros(writer, 3);
        writeUint32(writer, item.data.length);
        writeBytes(writer, new Uint8Array(item.data));
    }
});
addHandler('lyvr', function (target) { return typeof target.version !== 'undefined'; }, function (reader, target) {
    target.version = readUint32(reader);
}, function (writer, target) {
    writeUint32(writer, target.version);
});
addHandler('lrFX', function (target) { return typeof target.effects !== 'undefined'; }, function (reader, target, left) {
    target.effects = readEffects(reader);
    skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    writeEffects(writer, target.effects);
});
/*
addHandler(
    'TySh',
    _target => false, // typeof target.effects !== 'undefined',
    (reader, target) => {
        const version = readInt16(reader);

        if (version !== 1) {
            throw new Error(`Invalid TySh version: ${version}`);
        }

        const transform = [
            readFloat64(reader),
            readFloat64(reader),
            readFloat64(reader),
            readFloat64(reader),
            readFloat64(reader),
            readFloat64(reader),
        ];

        const textVersion = readInt16(reader);
        const descriptorVersion = readInt32(reader);

        if (textVersion !== 50 || descriptorVersion !== 16) {
            throw new Error(`Invalid TySh text version: ${textVersion}/${descriptorVersion}`);
        }

        const text = readDescriptorStructure(reader);

        // console.log('EngineData:', parseEngineData(text.EngineData));

        const warpVersion = readInt16(reader);
        const warpDescriptorVersion = readInt32(reader);

        if (warpVersion !== 1 || warpDescriptorVersion !== 16) {
            throw new Error(`Invalid TySh warp version: ${warpVersion} ${warpDescriptorVersion}`);
        }

        const warp = readDescriptorStructure(reader);

        const left = readInt32(reader);
        const top = readInt32(reader);
        const right = readInt32(reader);
        const bottom = readInt32(reader);

        target.typeToolObjectSetting = { transform, text, warp, left, top, right, bottom };
    },
    (_writer, _target) => {
        throw new Error('not implemented');
    },
);

addHandler(
    'Txt2',
    target => typeof target.textEngineData !== 'undefined',
    (reader, target, left) => {
        target.textEngineData = Array.from(readBytes(reader, left()));
    },
    (writer, target) => {
        writeBytes(writer, new Uint8Array(target.textEngineData!));
    },
);
*/
addHandler('lfx2', function (target) { return typeof target.objectBasedEffectsLayerInfo !== 'undefined'; }, function (reader, _target, left) {
    skipBytes(reader, left());
    // const version = readUint32(reader);
    // const descriptorVersion = readUint32(reader);
    // const name = reader.readUnicodeString();
    // const classId = readStringOrClassId(reader);
    // const itemsCount = readUint32(reader);
    //for (let i = 0; i < itemsCount; i++) {
    //	console.log('read item');
    //	const key = readStringOrClassId(reader);
    //	console.log('key', [key]);
    //}
    //target.objectBasedEffectsLayerInfo = {
    //	version,
    //	descriptorVersion,
    //	descriptor: {
    //		name,
    //		classId,
    //		//...
    //	},
    //};
}, function (_writer, _target) {
    //...
});
// Helpers
function readAsciiStringOrClassId(reader) {
    var length = readInt32(reader);
    return length === 0 ? readSignature(reader) : readAsciiString(reader, length);
}
function readDescriptorStructure(reader) {
    readClassStructure(reader);
    var itemsCount = readUint32(reader);
    var object = {};
    for (var i = 0; i < itemsCount; i++) {
        var key = readAsciiStringOrClassId(reader);
        var type = readSignature(reader);
        var data = readOSType(reader, type);
        object[key] = data;
    }
    return object;
}
function readOSType(reader, type) {
    switch (type) {
        case 'obj ': // Reference
            return readReferenceStructure(reader);
        case 'Objc': // Descriptor
        case 'GlbO': // GlobalObject same as Descriptor
            return readDescriptorStructure(reader);
        case 'VlLs': // List
            return readListStructure(reader);
        case 'doub': // Double
            return readFloat64(reader);
        case 'UntF': // Unit double
            return readUnitDoubleStructure(reader);
        case 'UnFl': // Unit float
            return readUnitFloatStructure(reader);
        case 'TEXT': // String
            return readUnicodeString(reader);
        case 'enum': // Enumerated
            return readEnumerated(reader);
        case 'long': // Integer
            return readInt32(reader);
        case 'comp': // Large Integer
            return readLargeInteger(reader);
        case 'bool': // Boolean
            return !!readUint8(reader);
        case 'type': // Class
        case 'GlbC': // Class
            return readClassStructure(reader);
        case 'alis': // Alias
            return readAliasStructure(reader);
        case 'tdta': // Raw Data
            return readRawData(reader);
        case 'ObAr': // Object array
            throw new Error('not implemented: ObAr');
        case 'Pth ': // File path
            return readFilePath(reader);
        default:
            throw new Error("Invalid TySh descriptor OSType: " + type + " at " + reader.offset.toString(16));
    }
}
function readReferenceStructure(reader) {
    var itemsCount = readInt32(reader);
    var items = [];
    for (var i = 0; i < itemsCount; i++) {
        var type = readSignature(reader);
        switch (type) {
            case 'prop': // Property
                items.push(readPropertyStructure(reader));
                break;
            case 'Clss': // Class
                items.push(readClassStructure(reader));
                break;
            case 'Enmr': // Enumerated Reference
                items.push(readEnumeratedReference(reader));
                break;
            case 'rele': // Offset
                items.push(readOffsetStructure(reader));
                break;
            case 'Idnt': // Identifier
                items.push(readInt32(reader));
                break;
            case 'indx': // Index
                items.push(readInt32(reader));
                break;
            case 'name': // Name
                items.push(readUnicodeString(reader));
                break;
            default:
                throw new Error("Invalid TySh descriptor Reference type: " + type);
        }
    }
    return items;
}
function readPropertyStructure(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var keyID = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID, keyID: keyID };
}
var unitsMap = {
    '#Ang': 'Angle',
    '#Rsl': 'Density',
    '#Rlt': 'Distance',
    '#Nne': 'None',
    '#Prc': 'Percent',
    '#Pxl': 'Pixels',
    '#Mlm': 'Millimeters',
    '#Pnt': 'Points',
};
function readUnitDoubleStructure(reader) {
    var units = readSignature(reader);
    var value = readFloat64(reader);
    return { units: unitsMap[units], value: value };
}
function readUnitFloatStructure(reader) {
    var units = readSignature(reader);
    var value = readFloat32(reader);
    return { units: unitsMap[units], value: value };
}
function readClassStructure(reader) {
    var name = readUnicodeString(reader);
    var classID = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID };
}
function readEnumeratedReference(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var TypeID = readAsciiStringOrClassId(reader);
    var value = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID, TypeID: TypeID, value: value };
}
function readOffsetStructure(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var value = readUint32(reader);
    return { name: name, classID: classID, value: value };
}
function readAliasStructure(reader) {
    var length = readInt32(reader);
    return readAsciiString(reader, length);
}
function readListStructure(reader) {
    var length = readInt32(reader);
    var type = readSignature(reader);
    var items = [];
    for (var i = 0; i < length; i++) {
        items.push(readOSType(reader, type));
    }
    return items;
}
function readLargeInteger(reader) {
    var low = readUint32(reader);
    var high = readUint32(reader);
    return { low: low, high: high };
}
function readEnumerated(reader) {
    var type = readAsciiStringOrClassId(reader);
    var value = readAsciiStringOrClassId(reader);
    return type + "." + value;
}
function readRawData(reader) {
    var length = readInt32(reader);
    return Array.from(readBytes(reader, length));
}
function readFilePath(reader) {
    var length = readInt32(reader);
    var sig = readSignature(reader);
    var pathSize = readInt32LE(reader);
    var charsCount = readInt32LE(reader);
    var path = readUnicodeStringWithLength(reader, charsCount);
    length;
    pathSize;
    return { sig: sig, path: path };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
