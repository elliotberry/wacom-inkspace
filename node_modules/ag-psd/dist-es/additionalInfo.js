import { readEffects, writeEffects } from './effectsHelpers';
import { readColor, toArray } from './helpers';
import { readSignature, readUnicodeString, skipBytes, readUint32, readUint8, readFloat64, readUint16, readBytes, readInt32, readInt16 } from './psdReader';
import { writeZeros, writeUnicodeString, writeSignature, writeBytes, writeUint32, writeUint16, writeFloat64, writeUint8, writeInt16, writeInt32 } from './psdWriter';
import { readDescriptorStructure, writeDescriptorStructure } from './descriptor';
var handlers = [];
var handlersMap = {};
function addHandler(key, has, read, write) {
    var handler = { key: key, has: has, read: read, write: write };
    handlers.push(handler);
    handlersMap[handler.key] = handler;
}
export function getHandler(key) {
    return handlersMap[key];
}
export function getHandlers() {
    return handlers;
}
function revMap(map) {
    var result = {};
    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });
    return result;
}
// textGridding.None
var textGridding = {
    none: 'None',
};
var textGriddingRev = revMap(textGridding);
function toTextGridding(value) {
    return textGriddingRev[value.split('.')[1]] || 'none';
}
function fromTextGridding(value) {
    return "textGridding." + (textGridding[value] || 'None');
}
// Ornt.Hrzn | Ornt.Vrtc
var Ornt = {
    horizontal: 'Hrzn',
    vertical: 'Vrtc',
};
var OrntRev = revMap(Ornt);
function toOrientation(value) {
    return OrntRev[value.split('.')[1]] || 'horizontal';
}
function fromOrientation(value) {
    return "textGridding." + (Ornt[value] || 'Hrzn');
}
// Annt.antiAliasSharp | Annt.Anno | Annt.AnCr | Annt.AnSt | Annt.AnSm
var Annt = {
    none: 'Anno',
    sharp: 'antiAliasSharp',
    crisp: 'AnCr',
    strong: 'AnSt',
    smooth: 'AnSm',
};
var AnntRev = revMap(Annt);
function toAntialias(value) {
    return AnntRev[value.split('.')[1]] || 'none';
}
function fromAntialias(value) {
    return "Annt." + (Annt[value] || 'Anno');
}
// warpStyle.warpNone | warpStyle.warpArc | warpStyle.warpArcLower | warpStyle.warpArcUpper | warpStyle.warpArch
// warpStyle.warpBulge | warpStyle.warpShellLower | warpStyle.warpShellUpper | warpStyle.warpFlag
// warpStyle.warpWave | warpStyle.warpFish | warpStyle.warpRise | warpStyle.warpFisheye |
// warpStyle.warpInflate | warpStyle.warpSqueeze | warpStyle.warpTwist
var warpStyle = {
    none: 'warpNone',
    arc: 'warpArc',
    arcLower: 'warpArcLower',
    arcUpper: 'warpArcUpper',
    arch: 'warpArch',
    bulge: 'warpBulge',
    shellLower: 'warpShellLower',
    shellUpper: 'warpShellUpper',
    flag: 'warpFlag',
    wave: 'warpWave',
    fish: 'warpFish',
    rise: 'warpRise',
    fisheye: 'warpFisheye',
    inflate: 'warpInflate',
    squeeze: 'warpSqueeze',
    twist: 'warpTwist',
};
var warpStyleRev = revMap(warpStyle);
function toWarpStyle(value) {
    return warpStyleRev[value.split('.')[1]] || 'none';
}
function fromWarpStyle(value) {
    return "warpStyle." + (warpStyle[value] || 'warpNone');
}
addHandler('TySh', function (target) { return target.text !== undefined; }, function (reader, target) {
    var version = readInt16(reader);
    if (version !== 1) {
        throw new Error("Invalid TySh version: " + version);
    }
    var transform = [
        readFloat64(reader),
        readFloat64(reader),
        readFloat64(reader),
        readFloat64(reader),
        readFloat64(reader),
        readFloat64(reader),
    ];
    var textVersion = readInt16(reader);
    var descriptorVersion = readInt32(reader);
    if (textVersion !== 50 || descriptorVersion !== 16) {
        throw new Error("Invalid TySh text version: " + textVersion + "/" + descriptorVersion);
    }
    var text = readDescriptorStructure(reader);
    // console.log('EngineData:', JSON.stringify(parseEngineData(text.EngineData), null, 2), '\n');
    var warpVersion = readInt16(reader);
    var warpDescriptorVersion = readInt32(reader);
    if (warpVersion !== 1 || warpDescriptorVersion !== 16) {
        throw new Error("Invalid TySh warp version: " + warpVersion + " " + warpDescriptorVersion);
    }
    var warp = readDescriptorStructure(reader);
    var left = readInt32(reader);
    var top = readInt32(reader);
    var right = readInt32(reader);
    var bottom = readInt32(reader);
    target.text = {
        transform: transform, left: left, top: top, right: right, bottom: bottom,
        text: text['Txt '],
        index: text.TextIndex || 0,
        gridding: toTextGridding(text.textGridding),
        antialias: toAntialias(text.AntA),
        orientation: toOrientation(text.Ornt),
        warp: {
            style: toWarpStyle(warp.warpStyle),
            value: warp.warpValue || 0,
            perspective: warp.warpPerspective || 0,
            perspectiveOther: warp.warpPerspectiveOther || 0,
            rotate: toOrientation(warp.warpRotate),
        },
    };
}, function (writer, target) {
    var text = target.text;
    var warp = text.warp || {};
    var transform = text.transform || [1, 0, 0, 1, 0, 0];
    var textDescriptor = {
        'Txt ': text.text,
        textGridding: fromTextGridding(text.gridding),
        Ornt: fromOrientation(text.orientation),
        AntA: fromAntialias(text.antialias),
        TextIndex: text.index || 0,
    };
    var warpDescriptor = {
        warpStyle: fromWarpStyle(warp.style),
        warpValue: warp.value || 0,
        warpPerspective: warp.perspective || 0,
        warpPerspectiveOther: warp.perspectiveOther || 0,
        warpRotate: fromOrientation(warp.rotate),
    };
    writeInt16(writer, 1); // version
    for (var i = 0; i < 6; i++) {
        writeFloat64(writer, transform[i] || 0);
    }
    writeInt16(writer, 50); // text version
    writeInt32(writer, 16); // text descriptor version
    writeDescriptorStructure(writer, '', 'TxLr', textDescriptor);
    writeInt16(writer, 1); // warp version
    writeInt32(writer, 16); // warp descriptor version
    writeDescriptorStructure(writer, '', 'warp', warpDescriptor);
    writeInt32(writer, text.left || 0);
    writeInt32(writer, text.top || 0);
    writeInt32(writer, text.right || 0);
    writeInt32(writer, text.bottom || 0);
});
addHandler('luni', function (target) { return target.name !== undefined; }, function (reader, target, left) {
    target.name = readUnicodeString(reader);
    skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    writeUnicodeString(writer, target.name);
});
addHandler('lnsr', function (target) { return target.nameSource !== undefined; }, function (reader, target) { return target.nameSource = readSignature(reader); }, function (writer, target) { return writeSignature(writer, target.nameSource); });
addHandler('lyid', function (target) { return target.id !== undefined; }, function (reader, target) { return target.id = readUint32(reader); }, function (writer, target) { return writeUint32(writer, target.id); });
addHandler('clbl', function (target) { return target.blendClippendElements !== undefined; }, function (reader, target) {
    target.blendClippendElements = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.blendClippendElements ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('infx', function (target) { return target.blendInteriorElements !== undefined; }, function (reader, target) {
    target.blendInteriorElements = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.blendInteriorElements ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('knko', function (target) { return target.knockout !== undefined; }, function (reader, target) {
    target.knockout = !!readUint8(reader);
    skipBytes(reader, 3);
}, function (writer, target) {
    writeUint8(writer, target.knockout ? 1 : 0);
    writeZeros(writer, 3);
});
addHandler('lspf', function (target) { return target.protected !== undefined; }, function (reader, target) {
    var flags = readUint32(reader);
    target.protected = {
        transparency: (flags & 0x01) !== 0,
        composite: (flags & 0x02) !== 0,
        position: (flags & 0x04) !== 0,
    };
}, function (writer, target) {
    var flags = (target.protected.transparency ? 0x01 : 0) |
        (target.protected.composite ? 0x02 : 0) |
        (target.protected.position ? 0x04 : 0);
    writeUint32(writer, flags);
});
addHandler('lclr', function (target) { return target.sheetColors !== undefined; }, function (reader, target) {
    target.sheetColors = {
        color1: readUint32(reader),
        color2: readUint32(reader),
    };
}, function (writer, target) {
    writeUint32(writer, target.sheetColors.color1);
    writeUint32(writer, target.sheetColors.color2);
});
addHandler('shmd', function (target) { return target.metadata !== undefined; }, function (reader, target) {
    var count = readUint32(reader);
    target.metadata = [];
    for (var i = 0; i < count; i++) {
        var signature = readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        var key = readSignature(reader);
        var copy = !!readUint8(reader);
        skipBytes(reader, 3);
        var length_1 = readUint32(reader);
        var data = toArray(readBytes(reader, length_1));
        target.metadata.push({ key: key, copy: copy, data: data });
    }
}, function (writer, target) {
    writeUint32(writer, target.metadata.length);
    for (var i = 0; i < target.metadata.length; i++) {
        var item = target.metadata[i];
        writeSignature(writer, '8BIM');
        writeSignature(writer, item.key);
        writeUint8(writer, item.copy ? 1 : 0);
        writeZeros(writer, 3);
        writeUint32(writer, item.data.length);
        writeBytes(writer, new Uint8Array(item.data));
    }
});
addHandler('fxrp', function (target) { return target.referencePoint !== undefined; }, function (reader, target) {
    target.referencePoint = {
        x: readFloat64(reader),
        y: readFloat64(reader),
    };
}, function (writer, target) {
    writeFloat64(writer, target.referencePoint.x);
    writeFloat64(writer, target.referencePoint.y);
});
addHandler('lsct', function (target) { return target.sectionDivider !== undefined; }, function (reader, target, left) {
    var item = {};
    item.type = readUint32(reader);
    if (left()) {
        var signature = readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        item.key = readSignature(reader);
    }
    if (left()) {
        // 0 = normal
        // 1 = scene group, affects the animation timeline.
        item.subType = readUint32(reader);
    }
    target.sectionDivider = item;
}, function (writer, target) {
    writeUint32(writer, target.sectionDivider.type);
    if (target.sectionDivider.key) {
        writeSignature(writer, '8BIM');
        writeSignature(writer, target.sectionDivider.key);
        if (target.sectionDivider.subtype !== undefined)
            writeUint32(writer, target.sectionDivider.subtype);
    }
});
addHandler('lyvr', function (target) { return target.version !== undefined; }, function (reader, target) {
    target.version = readUint32(reader);
}, function (writer, target) {
    writeUint32(writer, target.version);
});
addHandler('lrFX', function (target) { return target.effects !== undefined; }, function (reader, target, left) {
    target.effects = readEffects(reader);
    skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    writeEffects(writer, target.effects);
});
// addHandler(
// 	'Txt2',
// 	target => !!(target as any)['__Txt2'], // target.text !== undefined,
// 	(reader, target, left) => {
// 		const textEngineData = readBytes(reader, left());
// 		(target as any)['__Txt2'] = Array.from(textEngineData);
// 		console.log('Txt2:textEngineData', parseEngineData(textEngineData));
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, new Uint8Array((target as any)['__Txt2'])); // new Uint8Array(target.textEngineData!));
// 	},
// );
addHandler('FMsk', function (target) { return target.filterMask !== undefined; }, function (reader, target) {
    target.filterMask = {
        colorSpace: readColor(reader),
        opacity: readUint16(reader),
    };
}, function (writer, target) {
    writeBytes(writer, new Uint8Array(target.filterMask.colorSpace));
    writeUint16(writer, target.filterMask.opacity);
});
// TODO: implement
addHandler('lfx2', function (target) { return !target; }, // target.objectBasedEffectsLayerInfo !== undefined,
function (reader, _target, left) {
    skipBytes(reader, left());
    // const version = readUint32(reader);
    // const descriptorVersion = readUint32(reader);
    // const name = reader.readUnicodeString();
    // const classId = readStringOrClassId(reader);
    // const itemsCount = readUint32(reader);
    //for (let i = 0; i < itemsCount; i++) {
    //	console.log('read item');
    //	const key = readStringOrClassId(reader);
    //	console.log('key', [key]);
    //}
    //target.objectBasedEffectsLayerInfo = {
    //	version,
    //	descriptorVersion,
    //	descriptor: {
    //		name,
    //		classId,
    //		//...
    //	},
    //};
}, function (_writer, _target) {
    //...
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZGl0aW9uYWxJbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0MsT0FBTyxFQUNLLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUN0RyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFDL0IsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNLLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQy9GLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFDaEQsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLHdCQUF3QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBU2pGLElBQU0sUUFBUSxHQUFrQixFQUFFLENBQUM7QUFDbkMsSUFBTSxXQUFXLEdBQW1DLEVBQUUsQ0FBQztBQUV2RCxTQUFTLFVBQVUsQ0FDbEIsR0FBVyxFQUNYLEdBQTZDLEVBQzdDLElBQWtGLEVBQ2xGLEtBQStEO0lBRS9ELElBQU0sT0FBTyxHQUFnQixFQUFFLEdBQUcsS0FBQSxFQUFFLEdBQUcsS0FBQSxFQUFFLElBQUksTUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7SUFDdkQsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXO0lBQ3JDLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVztJQUMxQixPQUFPLFFBQVEsQ0FBQztBQUNqQixDQUFDO0FBdUJELFNBQVMsTUFBTSxDQUFDLEdBQVM7SUFDeEIsSUFBTSxNQUFNLEdBQVMsRUFBRSxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUVELG9CQUFvQjtBQUNwQixJQUFNLFlBQVksR0FBUztJQUMxQixJQUFJLEVBQUUsTUFBTTtDQUNaLENBQUM7QUFFRixJQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFN0MsU0FBUyxjQUFjLENBQUMsS0FBYTtJQUNwQyxPQUFRLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFTLElBQUksTUFBTSxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLEtBQStCO0lBQ3hELE9BQU8sbUJBQWdCLFlBQVksQ0FBQyxLQUFNLENBQUMsSUFBSSxNQUFNLENBQUUsQ0FBQztBQUN6RCxDQUFDO0FBRUQsd0JBQXdCO0FBQ3hCLElBQU0sSUFBSSxHQUFTO0lBQ2xCLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLFFBQVEsRUFBRSxNQUFNO0NBQ2hCLENBQUM7QUFFRixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFN0IsU0FBUyxhQUFhLENBQUMsS0FBYTtJQUNuQyxPQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFTLElBQUksWUFBWSxDQUFDO0FBQzlELENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUE4QjtJQUN0RCxPQUFPLG1CQUFnQixJQUFJLENBQUMsS0FBTSxDQUFDLElBQUksTUFBTSxDQUFFLENBQUM7QUFDakQsQ0FBQztBQUVELHNFQUFzRTtBQUN0RSxJQUFNLElBQUksR0FBUztJQUNsQixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsS0FBSyxFQUFFLE1BQU07SUFDYixNQUFNLEVBQUUsTUFBTTtJQUNkLE1BQU0sRUFBRSxNQUFNO0NBQ2QsQ0FBQztBQUVGLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU3QixTQUFTLFdBQVcsQ0FBQyxLQUFhO0lBQ2pDLE9BQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVMsSUFBSSxNQUFNLENBQUM7QUFDeEQsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEtBQTRCO0lBQ2xELE9BQU8sV0FBUSxJQUFJLENBQUMsS0FBTSxDQUFDLElBQUksTUFBTSxDQUFFLENBQUM7QUFDekMsQ0FBQztBQUVELGdIQUFnSDtBQUNoSCxpR0FBaUc7QUFDakcseUZBQXlGO0FBQ3pGLHNFQUFzRTtBQUN0RSxJQUFNLFNBQVMsR0FBUztJQUN2QixJQUFJLEVBQUUsVUFBVTtJQUNoQixHQUFHLEVBQUUsU0FBUztJQUNkLFFBQVEsRUFBRSxjQUFjO0lBQ3hCLFFBQVEsRUFBRSxjQUFjO0lBQ3hCLElBQUksRUFBRSxVQUFVO0lBQ2hCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFVBQVUsRUFBRSxnQkFBZ0I7SUFDNUIsVUFBVSxFQUFFLGdCQUFnQjtJQUM1QixJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsVUFBVTtJQUNoQixPQUFPLEVBQUUsYUFBYTtJQUN0QixPQUFPLEVBQUUsYUFBYTtJQUN0QixPQUFPLEVBQUUsYUFBYTtJQUN0QixLQUFLLEVBQUUsV0FBVztDQUNsQixDQUFDO0FBRUYsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXZDLFNBQVMsV0FBVyxDQUFDLEtBQWE7SUFDakMsT0FBUSxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBUyxJQUFJLE1BQU0sQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsS0FBNEI7SUFDbEQsT0FBTyxnQkFBYSxTQUFTLENBQUMsS0FBTSxDQUFDLElBQUksVUFBVSxDQUFFLENBQUM7QUFDdkQsQ0FBQztBQUVELFVBQVUsQ0FDVCxNQUFNLEVBQ04sVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBekIsQ0FBeUIsRUFDbkMsVUFBQyxNQUFNLEVBQUUsTUFBTTtJQUNkLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVsQyxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBeUIsT0FBUyxDQUFDLENBQUM7S0FDcEQ7SUFFRCxJQUFNLFNBQVMsR0FBRztRQUNqQixXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25CLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbkIsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNuQixXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25CLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbkIsV0FBVyxDQUFDLE1BQU0sQ0FBQztLQUNuQixDQUFDO0lBRUYsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLElBQU0saUJBQWlCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxpQkFBaUIsS0FBSyxFQUFFLEVBQUU7UUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBOEIsV0FBVyxTQUFJLGlCQUFtQixDQUFDLENBQUM7S0FDbEY7SUFFRCxJQUFNLElBQUksR0FBbUIsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0QsK0ZBQStGO0lBRS9GLElBQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxJQUFNLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoRCxJQUFJLFdBQVcsS0FBSyxDQUFDLElBQUkscUJBQXFCLEtBQUssRUFBRSxFQUFFO1FBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQThCLFdBQVcsU0FBSSxxQkFBdUIsQ0FBQyxDQUFDO0tBQ3RGO0lBRUQsSUFBTSxJQUFJLEdBQW1CLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTdELElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqQyxNQUFNLENBQUMsSUFBSSxHQUFHO1FBQ2IsU0FBUyxXQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsTUFBTSxRQUFBO1FBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2xCLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUM7UUFDMUIsUUFBUSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNDLFNBQVMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxXQUFXLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckMsSUFBSSxFQUFFO1lBQ0wsS0FBSyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUM7WUFDMUIsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQztZQUN0QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLElBQUksQ0FBQztZQUNoRCxNQUFNLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDdEM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyxFQUNELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSyxDQUFDO0lBQzFCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzdCLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXZELElBQU0sY0FBYyxHQUFtQjtRQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDakIsWUFBWSxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDN0MsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDO0tBQzFCLENBQUM7SUFFRixJQUFNLGNBQWMsR0FBbUI7UUFDdEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUM7UUFDMUIsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQztRQUN0QyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQztRQUNoRCxVQUFVLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7S0FDeEMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO0lBRWpDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDeEM7SUFFRCxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZTtJQUN2QyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO0lBRWxELHdCQUF3QixDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRTdELFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlO0lBQ3RDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7SUFFbEQsd0JBQXdCLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFN0QsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25DLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF6QixDQUF5QixFQUNuQyxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSTtJQUNwQixNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjtBQUM3QyxDQUFDLEVBQ0QsVUFBQyxNQUFNLEVBQUUsTUFBTTtJQUNkLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUNELENBQUM7QUFFRixVQUFVLENBQ1QsTUFBTSxFQUNOLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQS9CLENBQStCLEVBQ3pDLFVBQUMsTUFBTSxFQUFFLE1BQU0sSUFBSyxPQUFBLE1BQU0sQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUF6QyxDQUF5QyxFQUM3RCxVQUFDLE1BQU0sRUFBRSxNQUFNLElBQUssT0FBQSxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFXLENBQUMsRUFBMUMsQ0FBMEMsQ0FDOUQsQ0FBQztBQUVGLFVBQVUsQ0FDVCxNQUFNLEVBQ04sVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsRUFBRSxLQUFLLFNBQVMsRUFBdkIsQ0FBdUIsRUFDakMsVUFBQyxNQUFNLEVBQUUsTUFBTSxJQUFLLE9BQUEsTUFBTSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQTlCLENBQThCLEVBQ2xELFVBQUMsTUFBTSxFQUFFLE1BQU0sSUFBSyxPQUFBLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUcsQ0FBQyxFQUEvQixDQUErQixDQUNuRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxxQkFBcUIsS0FBSyxTQUFTLEVBQTFDLENBQTBDLEVBQ3BELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxNQUFNLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRCxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLENBQUMsRUFDRCxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQ0QsQ0FBQztBQUVGLFVBQVUsQ0FDVCxNQUFNLEVBQ04sVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMscUJBQXFCLEtBQUssU0FBUyxFQUExQyxDQUEwQyxFQUNwRCxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0QixDQUFDLEVBQ0QsVUFBQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUNELENBQUM7QUFFRixVQUFVLENBQ1QsTUFBTSxFQUNOLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQTdCLENBQTZCLEVBQ3ZDLFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0QixDQUFDLEVBQ0QsVUFBQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUE5QixDQUE4QixFQUN4QyxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxTQUFTLEdBQUc7UUFDbEIsWUFBWSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbEMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0IsUUFBUSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDOUIsQ0FBQztBQUNILENBQUMsRUFDRCxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsSUFBTSxLQUFLLEdBQ1YsQ0FBQyxNQUFNLENBQUMsU0FBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxNQUFNLENBQUMsU0FBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxNQUFNLENBQUMsU0FBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV6QyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFoQyxDQUFnQyxFQUMxQyxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxDQUFDLFdBQVcsR0FBRztRQUNwQixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUMxQixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQztLQUMxQixDQUFDO0FBQ0gsQ0FBQyxFQUNELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxXQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUE3QixDQUE2QixFQUN2QyxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBRXJCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLElBQUksU0FBUyxLQUFLLE1BQU07WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBdUIsU0FBUyxNQUFHLENBQUMsQ0FBQztRQUV0RCxJQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsSUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQU0sUUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQyxDQUFDO0tBQzFDO0FBQ0YsQ0FBQyxFQUNELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQixjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM5QztBQUNGLENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFuQyxDQUFtQyxFQUM3QyxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxDQUFDLGNBQWMsR0FBRztRQUN2QixDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUN0QixDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztLQUN0QixDQUFDO0FBQ0gsQ0FBQyxFQUNELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxjQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsY0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFuQyxDQUFtQyxFQUM3QyxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSTtJQUNwQixJQUFNLElBQUksR0FBUSxFQUFFLENBQUM7SUFFckIsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFL0IsSUFBSSxJQUFJLEVBQUUsRUFBRTtRQUNYLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4QyxJQUFJLFNBQVMsS0FBSyxNQUFNO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXVCLFNBQVMsTUFBRyxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDakM7SUFFRCxJQUFJLElBQUksRUFBRSxFQUFFO1FBQ1gsYUFBYTtRQUNiLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNsQztJQUVELE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzlCLENBQUMsRUFDRCxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsY0FBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpELElBQUksTUFBTSxDQUFDLGNBQWUsQ0FBQyxHQUFHLEVBQUU7UUFDL0IsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQixjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxjQUFlLENBQUMsR0FBSSxDQUFDLENBQUM7UUFFcEQsSUFBSSxNQUFNLENBQUMsY0FBZSxDQUFDLE9BQU8sS0FBSyxTQUFTO1lBQy9DLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGNBQWUsQ0FBQyxPQUFRLENBQUMsQ0FBQztLQUN0RDtBQUNGLENBQUMsQ0FDRCxDQUFDO0FBRUYsVUFBVSxDQUNULE1BQU0sRUFDTixVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUE1QixDQUE0QixFQUN0QyxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsQ0FBQyxFQUNELFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFRLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQ0QsQ0FBQztBQUVGLFVBQVUsQ0FDVCxNQUFNLEVBQ04sVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBNUIsQ0FBNEIsRUFDdEMsVUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCO0FBQzdDLENBQUMsRUFDRCxVQUFDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUNELENBQUM7QUFFRixjQUFjO0FBQ2QsV0FBVztBQUNYLHdFQUF3RTtBQUN4RSwrQkFBK0I7QUFDL0Isc0RBQXNEO0FBQ3RELDREQUE0RDtBQUM1RCx5RUFBeUU7QUFDekUsTUFBTTtBQUNOLHlCQUF5QjtBQUN6QiwrR0FBK0c7QUFDL0csTUFBTTtBQUNOLEtBQUs7QUFFTCxVQUFVLENBQ1QsTUFBTSxFQUNOLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQS9CLENBQStCLEVBQ3pDLFVBQUMsTUFBTSxFQUFFLE1BQU07SUFDZCxNQUFNLENBQUMsVUFBVSxHQUFHO1FBQ25CLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzdCLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDO0tBQzNCLENBQUM7QUFDSCxDQUFDLEVBQ0QsVUFBQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFVBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQ0QsQ0FBQztBQUVGLGtCQUFrQjtBQUNsQixVQUFVLENBQ1QsTUFBTSxFQUNOLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQyxNQUFNLEVBQVAsQ0FBTyxFQUFFLG9EQUFvRDtBQUN2RSxVQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSTtJQUNyQixTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUIsc0NBQXNDO0lBQ3RDLGdEQUFnRDtJQUVoRCwyQ0FBMkM7SUFDM0MsK0NBQStDO0lBQy9DLHlDQUF5QztJQUV6Qyx3Q0FBd0M7SUFDeEMsNEJBQTRCO0lBQzVCLDJDQUEyQztJQUMzQyw2QkFBNkI7SUFFN0IsR0FBRztJQUVILHdDQUF3QztJQUN4QyxXQUFXO0lBQ1gscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsWUFBWTtJQUNaLFNBQVM7SUFDVCxLQUFLO0lBQ0wsSUFBSTtBQUNMLENBQUMsRUFDRCxVQUFDLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLEtBQUs7QUFDTixDQUFDLENBQ0QsQ0FBQyIsImZpbGUiOiJhZGRpdGlvbmFsSW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRFZmZlY3RzLCB3cml0ZUVmZmVjdHMgfSBmcm9tICcuL2VmZmVjdHNIZWxwZXJzJztcbmltcG9ydCB7IHJlYWRDb2xvciwgdG9BcnJheSB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBMYXllckFkZGl0aW9uYWxJbmZvLCBUZXh0R3JpZGRpbmcsIE9yaWVudGF0aW9uLCBXYXJwU3R5bGUsIEFudGlhbGlhcyB9IGZyb20gJy4vcHNkJztcbmltcG9ydCB7XG5cdFBzZFJlYWRlciwgcmVhZFNpZ25hdHVyZSwgcmVhZFVuaWNvZGVTdHJpbmcsIHNraXBCeXRlcywgcmVhZFVpbnQzMiwgcmVhZFVpbnQ4LCByZWFkRmxvYXQ2NCwgcmVhZFVpbnQxNixcblx0cmVhZEJ5dGVzLCByZWFkSW50MzIsIHJlYWRJbnQxNlxufSBmcm9tICcuL3BzZFJlYWRlcic7XG5pbXBvcnQge1xuXHRQc2RXcml0ZXIsIHdyaXRlWmVyb3MsIHdyaXRlVW5pY29kZVN0cmluZywgd3JpdGVTaWduYXR1cmUsIHdyaXRlQnl0ZXMsIHdyaXRlVWludDMyLCB3cml0ZVVpbnQxNixcblx0d3JpdGVGbG9hdDY0LCB3cml0ZVVpbnQ4LCB3cml0ZUludDE2LCB3cml0ZUludDMyXG59IGZyb20gJy4vcHNkV3JpdGVyJztcbmltcG9ydCB7IHJlYWREZXNjcmlwdG9yU3RydWN0dXJlLCB3cml0ZURlc2NyaXB0b3JTdHJ1Y3R1cmUgfSBmcm9tICcuL2Rlc2NyaXB0b3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluZm9IYW5kbGVyIHtcblx0a2V5OiBzdHJpbmc7XG5cdGhhczogKHRhcmdldDogTGF5ZXJBZGRpdGlvbmFsSW5mbykgPT4gYm9vbGVhbjtcblx0cmVhZDogKHJlYWRlcjogUHNkUmVhZGVyLCB0YXJnZXQ6IExheWVyQWRkaXRpb25hbEluZm8sIGxlZnQ6ICgpID0+IG51bWJlcikgPT4gdm9pZDtcblx0d3JpdGU6ICh3cml0ZXI6IFBzZFdyaXRlciwgdGFyZ2V0OiBMYXllckFkZGl0aW9uYWxJbmZvKSA9PiB2b2lkO1xufVxuXG5jb25zdCBoYW5kbGVyczogSW5mb0hhbmRsZXJbXSA9IFtdO1xuY29uc3QgaGFuZGxlcnNNYXA6IHsgW2tleTogc3RyaW5nXTogSW5mb0hhbmRsZXIgfSA9IHt9O1xuXG5mdW5jdGlvbiBhZGRIYW5kbGVyKFxuXHRrZXk6IHN0cmluZyxcblx0aGFzOiAodGFyZ2V0OiBMYXllckFkZGl0aW9uYWxJbmZvKSA9PiBib29sZWFuLFxuXHRyZWFkOiAocmVhZGVyOiBQc2RSZWFkZXIsIHRhcmdldDogTGF5ZXJBZGRpdGlvbmFsSW5mbywgbGVmdDogKCkgPT4gbnVtYmVyKSA9PiB2b2lkLFxuXHR3cml0ZTogKHdyaXRlcjogUHNkV3JpdGVyLCB0YXJnZXQ6IExheWVyQWRkaXRpb25hbEluZm8pID0+IHZvaWQsXG4pIHtcblx0Y29uc3QgaGFuZGxlcjogSW5mb0hhbmRsZXIgPSB7IGtleSwgaGFzLCByZWFkLCB3cml0ZSB9O1xuXHRoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRoYW5kbGVyc01hcFtoYW5kbGVyLmtleV0gPSBoYW5kbGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFuZGxlcihrZXk6IHN0cmluZykge1xuXHRyZXR1cm4gaGFuZGxlcnNNYXBba2V5XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhhbmRsZXJzKCkge1xuXHRyZXR1cm4gaGFuZGxlcnM7XG59XG5cbmludGVyZmFjZSBUZXh0RGVzY3JpcHRvciB7XG5cdCdUeHQgJzogc3RyaW5nO1xuXHR0ZXh0R3JpZGRpbmc6IHN0cmluZztcblx0T3JudDogc3RyaW5nO1xuXHRBbnRBOiBzdHJpbmc7XG5cdFRleHRJbmRleDogbnVtYmVyO1xuXHRFbmdpbmVEYXRhPzogVWludDhBcnJheTtcbn1cblxuaW50ZXJmYWNlIFdhcnBEZXNjcmlwdG9yIHtcblx0d2FycFN0eWxlOiBzdHJpbmc7XG5cdHdhcnBWYWx1ZTogbnVtYmVyO1xuXHR3YXJwUGVyc3BlY3RpdmU6IG51bWJlcjtcblx0d2FycFBlcnNwZWN0aXZlT3RoZXI6IG51bWJlcjtcblx0d2FycFJvdGF0ZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRGljdCB7XG5cdFtrZXk6IHN0cmluZ106IHN0cmluZztcbn1cblxuZnVuY3Rpb24gcmV2TWFwKG1hcDogRGljdCkge1xuXHRjb25zdCByZXN1bHQ6IERpY3QgPSB7fTtcblx0T2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGtleSA9PiByZXN1bHRbbWFwW2tleV1dID0ga2V5KTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gdGV4dEdyaWRkaW5nLk5vbmVcbmNvbnN0IHRleHRHcmlkZGluZzogRGljdCA9IHtcblx0bm9uZTogJ05vbmUnLFxufTtcblxuY29uc3QgdGV4dEdyaWRkaW5nUmV2ID0gcmV2TWFwKHRleHRHcmlkZGluZyk7XG5cbmZ1bmN0aW9uIHRvVGV4dEdyaWRkaW5nKHZhbHVlOiBzdHJpbmcpOiBUZXh0R3JpZGRpbmcge1xuXHRyZXR1cm4gKHRleHRHcmlkZGluZ1Jldlt2YWx1ZS5zcGxpdCgnLicpWzFdXSBhcyBhbnkpIHx8ICdub25lJztcbn1cblxuZnVuY3Rpb24gZnJvbVRleHRHcmlkZGluZyh2YWx1ZTogVGV4dEdyaWRkaW5nIHwgdW5kZWZpbmVkKSB7XG5cdHJldHVybiBgdGV4dEdyaWRkaW5nLiR7dGV4dEdyaWRkaW5nW3ZhbHVlIV0gfHwgJ05vbmUnfWA7XG59XG5cbi8vIE9ybnQuSHJ6biB8IE9ybnQuVnJ0Y1xuY29uc3QgT3JudDogRGljdCA9IHtcblx0aG9yaXpvbnRhbDogJ0hyem4nLFxuXHR2ZXJ0aWNhbDogJ1ZydGMnLFxufTtcblxuY29uc3QgT3JudFJldiA9IHJldk1hcChPcm50KTtcblxuZnVuY3Rpb24gdG9PcmllbnRhdGlvbih2YWx1ZTogc3RyaW5nKTogT3JpZW50YXRpb24ge1xuXHRyZXR1cm4gKE9ybnRSZXZbdmFsdWUuc3BsaXQoJy4nKVsxXV0gYXMgYW55KSB8fCAnaG9yaXpvbnRhbCc7XG59XG5cbmZ1bmN0aW9uIGZyb21PcmllbnRhdGlvbih2YWx1ZTogT3JpZW50YXRpb24gfCB1bmRlZmluZWQpIHtcblx0cmV0dXJuIGB0ZXh0R3JpZGRpbmcuJHtPcm50W3ZhbHVlIV0gfHwgJ0hyem4nfWA7XG59XG5cbi8vIEFubnQuYW50aUFsaWFzU2hhcnAgfCBBbm50LkFubm8gfCBBbm50LkFuQ3IgfCBBbm50LkFuU3QgfCBBbm50LkFuU21cbmNvbnN0IEFubnQ6IERpY3QgPSB7XG5cdG5vbmU6ICdBbm5vJyxcblx0c2hhcnA6ICdhbnRpQWxpYXNTaGFycCcsXG5cdGNyaXNwOiAnQW5DcicsXG5cdHN0cm9uZzogJ0FuU3QnLFxuXHRzbW9vdGg6ICdBblNtJyxcbn07XG5cbmNvbnN0IEFubnRSZXYgPSByZXZNYXAoQW5udCk7XG5cbmZ1bmN0aW9uIHRvQW50aWFsaWFzKHZhbHVlOiBzdHJpbmcpOiBBbnRpYWxpYXMge1xuXHRyZXR1cm4gKEFubnRSZXZbdmFsdWUuc3BsaXQoJy4nKVsxXV0gYXMgYW55KSB8fCAnbm9uZSc7XG59XG5cbmZ1bmN0aW9uIGZyb21BbnRpYWxpYXModmFsdWU6IEFudGlhbGlhcyB8IHVuZGVmaW5lZCkge1xuXHRyZXR1cm4gYEFubnQuJHtBbm50W3ZhbHVlIV0gfHwgJ0Fubm8nfWA7XG59XG5cbi8vIHdhcnBTdHlsZS53YXJwTm9uZSB8IHdhcnBTdHlsZS53YXJwQXJjIHwgd2FycFN0eWxlLndhcnBBcmNMb3dlciB8IHdhcnBTdHlsZS53YXJwQXJjVXBwZXIgfCB3YXJwU3R5bGUud2FycEFyY2hcbi8vIHdhcnBTdHlsZS53YXJwQnVsZ2UgfCB3YXJwU3R5bGUud2FycFNoZWxsTG93ZXIgfCB3YXJwU3R5bGUud2FycFNoZWxsVXBwZXIgfCB3YXJwU3R5bGUud2FycEZsYWdcbi8vIHdhcnBTdHlsZS53YXJwV2F2ZSB8IHdhcnBTdHlsZS53YXJwRmlzaCB8IHdhcnBTdHlsZS53YXJwUmlzZSB8IHdhcnBTdHlsZS53YXJwRmlzaGV5ZSB8XG4vLyB3YXJwU3R5bGUud2FycEluZmxhdGUgfCB3YXJwU3R5bGUud2FycFNxdWVlemUgfCB3YXJwU3R5bGUud2FycFR3aXN0XG5jb25zdCB3YXJwU3R5bGU6IERpY3QgPSB7XG5cdG5vbmU6ICd3YXJwTm9uZScsXG5cdGFyYzogJ3dhcnBBcmMnLFxuXHRhcmNMb3dlcjogJ3dhcnBBcmNMb3dlcicsXG5cdGFyY1VwcGVyOiAnd2FycEFyY1VwcGVyJyxcblx0YXJjaDogJ3dhcnBBcmNoJyxcblx0YnVsZ2U6ICd3YXJwQnVsZ2UnLFxuXHRzaGVsbExvd2VyOiAnd2FycFNoZWxsTG93ZXInLFxuXHRzaGVsbFVwcGVyOiAnd2FycFNoZWxsVXBwZXInLFxuXHRmbGFnOiAnd2FycEZsYWcnLFxuXHR3YXZlOiAnd2FycFdhdmUnLFxuXHRmaXNoOiAnd2FycEZpc2gnLFxuXHRyaXNlOiAnd2FycFJpc2UnLFxuXHRmaXNoZXllOiAnd2FycEZpc2hleWUnLFxuXHRpbmZsYXRlOiAnd2FycEluZmxhdGUnLFxuXHRzcXVlZXplOiAnd2FycFNxdWVlemUnLFxuXHR0d2lzdDogJ3dhcnBUd2lzdCcsXG59O1xuXG5jb25zdCB3YXJwU3R5bGVSZXYgPSByZXZNYXAod2FycFN0eWxlKTtcblxuZnVuY3Rpb24gdG9XYXJwU3R5bGUodmFsdWU6IHN0cmluZyk6IFdhcnBTdHlsZSB7XG5cdHJldHVybiAod2FycFN0eWxlUmV2W3ZhbHVlLnNwbGl0KCcuJylbMV1dIGFzIGFueSkgfHwgJ25vbmUnO1xufVxuXG5mdW5jdGlvbiBmcm9tV2FycFN0eWxlKHZhbHVlOiBXYXJwU3R5bGUgfCB1bmRlZmluZWQpIHtcblx0cmV0dXJuIGB3YXJwU3R5bGUuJHt3YXJwU3R5bGVbdmFsdWUhXSB8fCAnd2FycE5vbmUnfWA7XG59XG5cbmFkZEhhbmRsZXIoXG5cdCdUeVNoJyxcblx0dGFyZ2V0ID0+IHRhcmdldC50ZXh0ICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4ge1xuXHRcdGNvbnN0IHZlcnNpb24gPSByZWFkSW50MTYocmVhZGVyKTtcblxuXHRcdGlmICh2ZXJzaW9uICE9PSAxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVHlTaCB2ZXJzaW9uOiAke3ZlcnNpb259YCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdHJhbnNmb3JtID0gW1xuXHRcdFx0cmVhZEZsb2F0NjQocmVhZGVyKSxcblx0XHRcdHJlYWRGbG9hdDY0KHJlYWRlciksXG5cdFx0XHRyZWFkRmxvYXQ2NChyZWFkZXIpLFxuXHRcdFx0cmVhZEZsb2F0NjQocmVhZGVyKSxcblx0XHRcdHJlYWRGbG9hdDY0KHJlYWRlciksXG5cdFx0XHRyZWFkRmxvYXQ2NChyZWFkZXIpLFxuXHRcdF07XG5cblx0XHRjb25zdCB0ZXh0VmVyc2lvbiA9IHJlYWRJbnQxNihyZWFkZXIpO1xuXHRcdGNvbnN0IGRlc2NyaXB0b3JWZXJzaW9uID0gcmVhZEludDMyKHJlYWRlcik7XG5cblx0XHRpZiAodGV4dFZlcnNpb24gIT09IDUwIHx8IGRlc2NyaXB0b3JWZXJzaW9uICE9PSAxNikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFR5U2ggdGV4dCB2ZXJzaW9uOiAke3RleHRWZXJzaW9ufS8ke2Rlc2NyaXB0b3JWZXJzaW9ufWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRleHQ6IFRleHREZXNjcmlwdG9yID0gcmVhZERlc2NyaXB0b3JTdHJ1Y3R1cmUocmVhZGVyKTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCdFbmdpbmVEYXRhOicsIEpTT04uc3RyaW5naWZ5KHBhcnNlRW5naW5lRGF0YSh0ZXh0LkVuZ2luZURhdGEpLCBudWxsLCAyKSwgJ1xcbicpO1xuXG5cdFx0Y29uc3Qgd2FycFZlcnNpb24gPSByZWFkSW50MTYocmVhZGVyKTtcblx0XHRjb25zdCB3YXJwRGVzY3JpcHRvclZlcnNpb24gPSByZWFkSW50MzIocmVhZGVyKTtcblxuXHRcdGlmICh3YXJwVmVyc2lvbiAhPT0gMSB8fCB3YXJwRGVzY3JpcHRvclZlcnNpb24gIT09IDE2KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVHlTaCB3YXJwIHZlcnNpb246ICR7d2FycFZlcnNpb259ICR7d2FycERlc2NyaXB0b3JWZXJzaW9ufWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHdhcnA6IFdhcnBEZXNjcmlwdG9yID0gcmVhZERlc2NyaXB0b3JTdHJ1Y3R1cmUocmVhZGVyKTtcblxuXHRcdGNvbnN0IGxlZnQgPSByZWFkSW50MzIocmVhZGVyKTtcblx0XHRjb25zdCB0b3AgPSByZWFkSW50MzIocmVhZGVyKTtcblx0XHRjb25zdCByaWdodCA9IHJlYWRJbnQzMihyZWFkZXIpO1xuXHRcdGNvbnN0IGJvdHRvbSA9IHJlYWRJbnQzMihyZWFkZXIpO1xuXG5cdFx0dGFyZ2V0LnRleHQgPSB7XG5cdFx0XHR0cmFuc2Zvcm0sIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSxcblx0XHRcdHRleHQ6IHRleHRbJ1R4dCAnXSxcblx0XHRcdGluZGV4OiB0ZXh0LlRleHRJbmRleCB8fCAwLFxuXHRcdFx0Z3JpZGRpbmc6IHRvVGV4dEdyaWRkaW5nKHRleHQudGV4dEdyaWRkaW5nKSxcblx0XHRcdGFudGlhbGlhczogdG9BbnRpYWxpYXModGV4dC5BbnRBKSxcblx0XHRcdG9yaWVudGF0aW9uOiB0b09yaWVudGF0aW9uKHRleHQuT3JudCksXG5cdFx0XHR3YXJwOiB7XG5cdFx0XHRcdHN0eWxlOiB0b1dhcnBTdHlsZSh3YXJwLndhcnBTdHlsZSksXG5cdFx0XHRcdHZhbHVlOiB3YXJwLndhcnBWYWx1ZSB8fCAwLFxuXHRcdFx0XHRwZXJzcGVjdGl2ZTogd2FycC53YXJwUGVyc3BlY3RpdmUgfHwgMCxcblx0XHRcdFx0cGVyc3BlY3RpdmVPdGhlcjogd2FycC53YXJwUGVyc3BlY3RpdmVPdGhlciB8fCAwLFxuXHRcdFx0XHRyb3RhdGU6IHRvT3JpZW50YXRpb24od2FycC53YXJwUm90YXRlKSxcblx0XHRcdH0sXG5cdFx0fTtcblx0fSxcblx0KHdyaXRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0Y29uc3QgdGV4dCA9IHRhcmdldC50ZXh0ITtcblx0XHRjb25zdCB3YXJwID0gdGV4dC53YXJwIHx8IHt9O1xuXHRcdGNvbnN0IHRyYW5zZm9ybSA9IHRleHQudHJhbnNmb3JtIHx8IFsxLCAwLCAwLCAxLCAwLCAwXTtcblxuXHRcdGNvbnN0IHRleHREZXNjcmlwdG9yOiBUZXh0RGVzY3JpcHRvciA9IHtcblx0XHRcdCdUeHQgJzogdGV4dC50ZXh0LFxuXHRcdFx0dGV4dEdyaWRkaW5nOiBmcm9tVGV4dEdyaWRkaW5nKHRleHQuZ3JpZGRpbmcpLFxuXHRcdFx0T3JudDogZnJvbU9yaWVudGF0aW9uKHRleHQub3JpZW50YXRpb24pLFxuXHRcdFx0QW50QTogZnJvbUFudGlhbGlhcyh0ZXh0LmFudGlhbGlhcyksXG5cdFx0XHRUZXh0SW5kZXg6IHRleHQuaW5kZXggfHwgMCxcblx0XHR9O1xuXG5cdFx0Y29uc3Qgd2FycERlc2NyaXB0b3I6IFdhcnBEZXNjcmlwdG9yID0ge1xuXHRcdFx0d2FycFN0eWxlOiBmcm9tV2FycFN0eWxlKHdhcnAuc3R5bGUpLFxuXHRcdFx0d2FycFZhbHVlOiB3YXJwLnZhbHVlIHx8IDAsXG5cdFx0XHR3YXJwUGVyc3BlY3RpdmU6IHdhcnAucGVyc3BlY3RpdmUgfHwgMCxcblx0XHRcdHdhcnBQZXJzcGVjdGl2ZU90aGVyOiB3YXJwLnBlcnNwZWN0aXZlT3RoZXIgfHwgMCxcblx0XHRcdHdhcnBSb3RhdGU6IGZyb21PcmllbnRhdGlvbih3YXJwLnJvdGF0ZSksXG5cdFx0fTtcblxuXHRcdHdyaXRlSW50MTYod3JpdGVyLCAxKTsgLy8gdmVyc2lvblxuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcblx0XHRcdHdyaXRlRmxvYXQ2NCh3cml0ZXIsIHRyYW5zZm9ybVtpXSB8fCAwKTtcblx0XHR9XG5cblx0XHR3cml0ZUludDE2KHdyaXRlciwgNTApOyAvLyB0ZXh0IHZlcnNpb25cblx0XHR3cml0ZUludDMyKHdyaXRlciwgMTYpOyAvLyB0ZXh0IGRlc2NyaXB0b3IgdmVyc2lvblxuXG5cdFx0d3JpdGVEZXNjcmlwdG9yU3RydWN0dXJlKHdyaXRlciwgJycsICdUeExyJywgdGV4dERlc2NyaXB0b3IpO1xuXG5cdFx0d3JpdGVJbnQxNih3cml0ZXIsIDEpOyAvLyB3YXJwIHZlcnNpb25cblx0XHR3cml0ZUludDMyKHdyaXRlciwgMTYpOyAvLyB3YXJwIGRlc2NyaXB0b3IgdmVyc2lvblxuXG5cdFx0d3JpdGVEZXNjcmlwdG9yU3RydWN0dXJlKHdyaXRlciwgJycsICd3YXJwJywgd2FycERlc2NyaXB0b3IpO1xuXG5cdFx0d3JpdGVJbnQzMih3cml0ZXIsIHRleHQubGVmdCB8fCAwKTtcblx0XHR3cml0ZUludDMyKHdyaXRlciwgdGV4dC50b3AgfHwgMCk7XG5cdFx0d3JpdGVJbnQzMih3cml0ZXIsIHRleHQucmlnaHQgfHwgMCk7XG5cdFx0d3JpdGVJbnQzMih3cml0ZXIsIHRleHQuYm90dG9tIHx8IDApO1xuXHR9LFxuKTtcblxuYWRkSGFuZGxlcihcblx0J2x1bmknLFxuXHR0YXJnZXQgPT4gdGFyZ2V0Lm5hbWUgIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgdGFyZ2V0LCBsZWZ0KSA9PiB7XG5cdFx0dGFyZ2V0Lm5hbWUgPSByZWFkVW5pY29kZVN0cmluZyhyZWFkZXIpO1xuXHRcdHNraXBCeXRlcyhyZWFkZXIsIGxlZnQoKSk7IC8vIFRFTVA6IHNraXBwaW5nXG5cdH0sXG5cdCh3cml0ZXIsIHRhcmdldCkgPT4ge1xuXHRcdHdyaXRlVW5pY29kZVN0cmluZyh3cml0ZXIsIHRhcmdldC5uYW1lISk7XG5cdH1cbik7XG5cbmFkZEhhbmRsZXIoXG5cdCdsbnNyJyxcblx0dGFyZ2V0ID0+IHRhcmdldC5uYW1lU291cmNlICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4gdGFyZ2V0Lm5hbWVTb3VyY2UgPSByZWFkU2lnbmF0dXJlKHJlYWRlciksXG5cdCh3cml0ZXIsIHRhcmdldCkgPT4gd3JpdGVTaWduYXR1cmUod3JpdGVyLCB0YXJnZXQubmFtZVNvdXJjZSEpLFxuKTtcblxuYWRkSGFuZGxlcihcblx0J2x5aWQnLFxuXHR0YXJnZXQgPT4gdGFyZ2V0LmlkICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4gdGFyZ2V0LmlkID0gcmVhZFVpbnQzMihyZWFkZXIpLFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHdyaXRlVWludDMyKHdyaXRlciwgdGFyZ2V0LmlkISksXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQnY2xibCcsXG5cdHRhcmdldCA9PiB0YXJnZXQuYmxlbmRDbGlwcGVuZEVsZW1lbnRzICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4ge1xuXHRcdHRhcmdldC5ibGVuZENsaXBwZW5kRWxlbWVudHMgPSAhIXJlYWRVaW50OChyZWFkZXIpO1xuXHRcdHNraXBCeXRlcyhyZWFkZXIsIDMpO1xuXHR9LFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgdGFyZ2V0LmJsZW5kQ2xpcHBlbmRFbGVtZW50cyA/IDEgOiAwKTtcblx0XHR3cml0ZVplcm9zKHdyaXRlciwgMyk7XG5cdH0sXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQnaW5meCcsXG5cdHRhcmdldCA9PiB0YXJnZXQuYmxlbmRJbnRlcmlvckVsZW1lbnRzICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4ge1xuXHRcdHRhcmdldC5ibGVuZEludGVyaW9yRWxlbWVudHMgPSAhIXJlYWRVaW50OChyZWFkZXIpO1xuXHRcdHNraXBCeXRlcyhyZWFkZXIsIDMpO1xuXHR9LFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgdGFyZ2V0LmJsZW5kSW50ZXJpb3JFbGVtZW50cyA/IDEgOiAwKTtcblx0XHR3cml0ZVplcm9zKHdyaXRlciwgMyk7XG5cdH0sXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQna25rbycsXG5cdHRhcmdldCA9PiB0YXJnZXQua25vY2tvdXQgIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0dGFyZ2V0Lmtub2Nrb3V0ID0gISFyZWFkVWludDgocmVhZGVyKTtcblx0XHRza2lwQnl0ZXMocmVhZGVyLCAzKTtcblx0fSxcblx0KHdyaXRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0d3JpdGVVaW50OCh3cml0ZXIsIHRhcmdldC5rbm9ja291dCA/IDEgOiAwKTtcblx0XHR3cml0ZVplcm9zKHdyaXRlciwgMyk7XG5cdH0sXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQnbHNwZicsXG5cdHRhcmdldCA9PiB0YXJnZXQucHJvdGVjdGVkICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4ge1xuXHRcdGNvbnN0IGZsYWdzID0gcmVhZFVpbnQzMihyZWFkZXIpO1xuXHRcdHRhcmdldC5wcm90ZWN0ZWQgPSB7XG5cdFx0XHR0cmFuc3BhcmVuY3k6IChmbGFncyAmIDB4MDEpICE9PSAwLFxuXHRcdFx0Y29tcG9zaXRlOiAoZmxhZ3MgJiAweDAyKSAhPT0gMCxcblx0XHRcdHBvc2l0aW9uOiAoZmxhZ3MgJiAweDA0KSAhPT0gMCxcblx0XHR9O1xuXHR9LFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHtcblx0XHRjb25zdCBmbGFncyA9XG5cdFx0XHQodGFyZ2V0LnByb3RlY3RlZCEudHJhbnNwYXJlbmN5ID8gMHgwMSA6IDApIHxcblx0XHRcdCh0YXJnZXQucHJvdGVjdGVkIS5jb21wb3NpdGUgPyAweDAyIDogMCkgfFxuXHRcdFx0KHRhcmdldC5wcm90ZWN0ZWQhLnBvc2l0aW9uID8gMHgwNCA6IDApO1xuXG5cdFx0d3JpdGVVaW50MzIod3JpdGVyLCBmbGFncyk7XG5cdH0sXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQnbGNscicsXG5cdHRhcmdldCA9PiB0YXJnZXQuc2hlZXRDb2xvcnMgIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0dGFyZ2V0LnNoZWV0Q29sb3JzID0ge1xuXHRcdFx0Y29sb3IxOiByZWFkVWludDMyKHJlYWRlciksXG5cdFx0XHRjb2xvcjI6IHJlYWRVaW50MzIocmVhZGVyKSxcblx0XHR9O1xuXHR9LFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHtcblx0XHR3cml0ZVVpbnQzMih3cml0ZXIsIHRhcmdldC5zaGVldENvbG9ycyEuY29sb3IxKTtcblx0XHR3cml0ZVVpbnQzMih3cml0ZXIsIHRhcmdldC5zaGVldENvbG9ycyEuY29sb3IyKTtcblx0fSxcbik7XG5cbmFkZEhhbmRsZXIoXG5cdCdzaG1kJyxcblx0dGFyZ2V0ID0+IHRhcmdldC5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkLFxuXHQocmVhZGVyLCB0YXJnZXQpID0+IHtcblx0XHRjb25zdCBjb3VudCA9IHJlYWRVaW50MzIocmVhZGVyKTtcblx0XHR0YXJnZXQubWV0YWRhdGEgPSBbXTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlID0gcmVhZFNpZ25hdHVyZShyZWFkZXIpO1xuXG5cdFx0XHRpZiAoc2lnbmF0dXJlICE9PSAnOEJJTScpXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmU6ICcke3NpZ25hdHVyZX0nYCk7XG5cblx0XHRcdGNvbnN0IGtleSA9IHJlYWRTaWduYXR1cmUocmVhZGVyKTtcblx0XHRcdGNvbnN0IGNvcHkgPSAhIXJlYWRVaW50OChyZWFkZXIpO1xuXHRcdFx0c2tpcEJ5dGVzKHJlYWRlciwgMyk7XG5cdFx0XHRjb25zdCBsZW5ndGggPSByZWFkVWludDMyKHJlYWRlcik7XG5cdFx0XHRjb25zdCBkYXRhID0gdG9BcnJheShyZWFkQnl0ZXMocmVhZGVyLCBsZW5ndGgpKTtcblx0XHRcdHRhcmdldC5tZXRhZGF0YS5wdXNoKHsga2V5LCBjb3B5LCBkYXRhIH0pO1xuXHRcdH1cblx0fSxcblx0KHdyaXRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0d3JpdGVVaW50MzIod3JpdGVyLCB0YXJnZXQubWV0YWRhdGEhLmxlbmd0aCk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldC5tZXRhZGF0YSEubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGl0ZW0gPSB0YXJnZXQubWV0YWRhdGEhW2ldO1xuXHRcdFx0d3JpdGVTaWduYXR1cmUod3JpdGVyLCAnOEJJTScpO1xuXHRcdFx0d3JpdGVTaWduYXR1cmUod3JpdGVyLCBpdGVtLmtleSk7XG5cdFx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgaXRlbS5jb3B5ID8gMSA6IDApO1xuXHRcdFx0d3JpdGVaZXJvcyh3cml0ZXIsIDMpO1xuXHRcdFx0d3JpdGVVaW50MzIod3JpdGVyLCBpdGVtLmRhdGEubGVuZ3RoKTtcblx0XHRcdHdyaXRlQnl0ZXMod3JpdGVyLCBuZXcgVWludDhBcnJheShpdGVtLmRhdGEpKTtcblx0XHR9XG5cdH0sXG4pO1xuXG5hZGRIYW5kbGVyKFxuXHQnZnhycCcsXG5cdHRhcmdldCA9PiB0YXJnZXQucmVmZXJlbmNlUG9pbnQgIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0dGFyZ2V0LnJlZmVyZW5jZVBvaW50ID0ge1xuXHRcdFx0eDogcmVhZEZsb2F0NjQocmVhZGVyKSxcblx0XHRcdHk6IHJlYWRGbG9hdDY0KHJlYWRlciksXG5cdFx0fTtcblx0fSxcblx0KHdyaXRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0d3JpdGVGbG9hdDY0KHdyaXRlciwgdGFyZ2V0LnJlZmVyZW5jZVBvaW50IS54KTtcblx0XHR3cml0ZUZsb2F0NjQod3JpdGVyLCB0YXJnZXQucmVmZXJlbmNlUG9pbnQhLnkpO1xuXHR9LFxuKTtcblxuYWRkSGFuZGxlcihcblx0J2xzY3QnLFxuXHR0YXJnZXQgPT4gdGFyZ2V0LnNlY3Rpb25EaXZpZGVyICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCwgbGVmdCkgPT4ge1xuXHRcdGNvbnN0IGl0ZW06IGFueSA9IHt9O1xuXG5cdFx0aXRlbS50eXBlID0gcmVhZFVpbnQzMihyZWFkZXIpO1xuXG5cdFx0aWYgKGxlZnQoKSkge1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlID0gcmVhZFNpZ25hdHVyZShyZWFkZXIpO1xuXG5cdFx0XHRpZiAoc2lnbmF0dXJlICE9PSAnOEJJTScpXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmU6ICcke3NpZ25hdHVyZX0nYCk7XG5cblx0XHRcdGl0ZW0ua2V5ID0gcmVhZFNpZ25hdHVyZShyZWFkZXIpO1xuXHRcdH1cblxuXHRcdGlmIChsZWZ0KCkpIHtcblx0XHRcdC8vIDAgPSBub3JtYWxcblx0XHRcdC8vIDEgPSBzY2VuZSBncm91cCwgYWZmZWN0cyB0aGUgYW5pbWF0aW9uIHRpbWVsaW5lLlxuXHRcdFx0aXRlbS5zdWJUeXBlID0gcmVhZFVpbnQzMihyZWFkZXIpO1xuXHRcdH1cblxuXHRcdHRhcmdldC5zZWN0aW9uRGl2aWRlciA9IGl0ZW07XG5cdH0sXG5cdCh3cml0ZXIsIHRhcmdldCkgPT4ge1xuXHRcdHdyaXRlVWludDMyKHdyaXRlciwgdGFyZ2V0LnNlY3Rpb25EaXZpZGVyIS50eXBlKTtcblxuXHRcdGlmICh0YXJnZXQuc2VjdGlvbkRpdmlkZXIhLmtleSkge1xuXHRcdFx0d3JpdGVTaWduYXR1cmUod3JpdGVyLCAnOEJJTScpO1xuXHRcdFx0d3JpdGVTaWduYXR1cmUod3JpdGVyLCB0YXJnZXQuc2VjdGlvbkRpdmlkZXIhLmtleSEpO1xuXG5cdFx0XHRpZiAodGFyZ2V0LnNlY3Rpb25EaXZpZGVyIS5zdWJ0eXBlICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdHdyaXRlVWludDMyKHdyaXRlciwgdGFyZ2V0LnNlY3Rpb25EaXZpZGVyIS5zdWJ0eXBlISk7XG5cdFx0fVxuXHR9LFxuKTtcblxuYWRkSGFuZGxlcihcblx0J2x5dnInLFxuXHR0YXJnZXQgPT4gdGFyZ2V0LnZlcnNpb24gIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0dGFyZ2V0LnZlcnNpb24gPSByZWFkVWludDMyKHJlYWRlcik7XG5cdH0sXG5cdCh3cml0ZXIsIHRhcmdldCkgPT4ge1xuXHRcdHdyaXRlVWludDMyKHdyaXRlciwgdGFyZ2V0LnZlcnNpb24hKTtcblx0fSxcbik7XG5cbmFkZEhhbmRsZXIoXG5cdCdsckZYJyxcblx0dGFyZ2V0ID0+IHRhcmdldC5lZmZlY3RzICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCwgbGVmdCkgPT4ge1xuXHRcdHRhcmdldC5lZmZlY3RzID0gcmVhZEVmZmVjdHMocmVhZGVyKTtcblx0XHRza2lwQnl0ZXMocmVhZGVyLCBsZWZ0KCkpOyAvLyBURU1QOiBza2lwcGluZ1xuXHR9LFxuXHQod3JpdGVyLCB0YXJnZXQpID0+IHtcblx0XHR3cml0ZUVmZmVjdHMod3JpdGVyLCB0YXJnZXQuZWZmZWN0cyEpO1xuXHR9LFxuKTtcblxuLy8gYWRkSGFuZGxlcihcbi8vIFx0J1R4dDInLFxuLy8gXHR0YXJnZXQgPT4gISEodGFyZ2V0IGFzIGFueSlbJ19fVHh0MiddLCAvLyB0YXJnZXQudGV4dCAhPT0gdW5kZWZpbmVkLFxuLy8gXHQocmVhZGVyLCB0YXJnZXQsIGxlZnQpID0+IHtcbi8vIFx0XHRjb25zdCB0ZXh0RW5naW5lRGF0YSA9IHJlYWRCeXRlcyhyZWFkZXIsIGxlZnQoKSk7XG4vLyBcdFx0KHRhcmdldCBhcyBhbnkpWydfX1R4dDInXSA9IEFycmF5LmZyb20odGV4dEVuZ2luZURhdGEpO1xuLy8gXHRcdGNvbnNvbGUubG9nKCdUeHQyOnRleHRFbmdpbmVEYXRhJywgcGFyc2VFbmdpbmVEYXRhKHRleHRFbmdpbmVEYXRhKSk7XG4vLyBcdH0sXG4vLyBcdCh3cml0ZXIsIHRhcmdldCkgPT4ge1xuLy8gXHRcdHdyaXRlQnl0ZXMod3JpdGVyLCBuZXcgVWludDhBcnJheSgodGFyZ2V0IGFzIGFueSlbJ19fVHh0MiddKSk7IC8vIG5ldyBVaW50OEFycmF5KHRhcmdldC50ZXh0RW5naW5lRGF0YSEpKTtcbi8vIFx0fSxcbi8vICk7XG5cbmFkZEhhbmRsZXIoXG5cdCdGTXNrJyxcblx0dGFyZ2V0ID0+IHRhcmdldC5maWx0ZXJNYXNrICE9PSB1bmRlZmluZWQsXG5cdChyZWFkZXIsIHRhcmdldCkgPT4ge1xuXHRcdHRhcmdldC5maWx0ZXJNYXNrID0ge1xuXHRcdFx0Y29sb3JTcGFjZTogcmVhZENvbG9yKHJlYWRlciksXG5cdFx0XHRvcGFjaXR5OiByZWFkVWludDE2KHJlYWRlciksXG5cdFx0fTtcblx0fSxcblx0KHdyaXRlciwgdGFyZ2V0KSA9PiB7XG5cdFx0d3JpdGVCeXRlcyh3cml0ZXIsIG5ldyBVaW50OEFycmF5KHRhcmdldC5maWx0ZXJNYXNrIS5jb2xvclNwYWNlKSk7XG5cdFx0d3JpdGVVaW50MTYod3JpdGVyLCB0YXJnZXQuZmlsdGVyTWFzayEub3BhY2l0eSk7XG5cdH0sXG4pO1xuXG4vLyBUT0RPOiBpbXBsZW1lbnRcbmFkZEhhbmRsZXIoXG5cdCdsZngyJyxcblx0dGFyZ2V0ID0+ICF0YXJnZXQsIC8vIHRhcmdldC5vYmplY3RCYXNlZEVmZmVjdHNMYXllckluZm8gIT09IHVuZGVmaW5lZCxcblx0KHJlYWRlciwgX3RhcmdldCwgbGVmdCkgPT4ge1xuXHRcdHNraXBCeXRlcyhyZWFkZXIsIGxlZnQoKSk7XG5cdFx0Ly8gY29uc3QgdmVyc2lvbiA9IHJlYWRVaW50MzIocmVhZGVyKTtcblx0XHQvLyBjb25zdCBkZXNjcmlwdG9yVmVyc2lvbiA9IHJlYWRVaW50MzIocmVhZGVyKTtcblxuXHRcdC8vIGNvbnN0IG5hbWUgPSByZWFkZXIucmVhZFVuaWNvZGVTdHJpbmcoKTtcblx0XHQvLyBjb25zdCBjbGFzc0lkID0gcmVhZFN0cmluZ09yQ2xhc3NJZChyZWFkZXIpO1xuXHRcdC8vIGNvbnN0IGl0ZW1zQ291bnQgPSByZWFkVWludDMyKHJlYWRlcik7XG5cblx0XHQvL2ZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNDb3VudDsgaSsrKSB7XG5cdFx0Ly9cdGNvbnNvbGUubG9nKCdyZWFkIGl0ZW0nKTtcblx0XHQvL1x0Y29uc3Qga2V5ID0gcmVhZFN0cmluZ09yQ2xhc3NJZChyZWFkZXIpO1xuXHRcdC8vXHRjb25zb2xlLmxvZygna2V5JywgW2tleV0pO1xuXG5cdFx0Ly99XG5cblx0XHQvL3RhcmdldC5vYmplY3RCYXNlZEVmZmVjdHNMYXllckluZm8gPSB7XG5cdFx0Ly9cdHZlcnNpb24sXG5cdFx0Ly9cdGRlc2NyaXB0b3JWZXJzaW9uLFxuXHRcdC8vXHRkZXNjcmlwdG9yOiB7XG5cdFx0Ly9cdFx0bmFtZSxcblx0XHQvL1x0XHRjbGFzc0lkLFxuXHRcdC8vXHRcdC8vLi4uXG5cdFx0Ly9cdH0sXG5cdFx0Ly99O1xuXHR9LFxuXHQoX3dyaXRlciwgX3RhcmdldCkgPT4ge1xuXHRcdC8vLi4uXG5cdH0sXG4pO1xuIl0sInNvdXJjZVJvb3QiOiJEOlxcUHJvamVjdHNcXGdpdGh1YlxcYWctcHNkXFxzcmMifQ==
